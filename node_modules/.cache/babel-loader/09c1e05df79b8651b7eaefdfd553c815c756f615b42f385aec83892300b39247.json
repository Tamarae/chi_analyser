{"ast":null,"code":"var _jsxFileName = \"/Applications/CLANc/core-voc/lemma-matcher/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Papa from 'papaparse';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Reference data state\n  const [referenceData, setReferenceData] = useState([]);\n  const [indexedData, setIndexedData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [referenceLoaded, setReferenceLoaded] = useState(false);\n  const [referenceCSV, setReferenceCSV] = useState('');\n\n  // Input state\n  const [userCSV, setUserCSV] = useState('');\n  const [csvData, setCsvData] = useState([]);\n  const [parseProgress, setParseProgress] = useState(0);\n  const [batchSize, setBatchSize] = useState(500);\n  const [currentBatch, setCurrentBatch] = useState(1);\n  const [processingBatch, setProcessingBatch] = useState(false);\n\n  // Results state\n  const [matchedResults, setMatchedResults] = useState([]);\n  const [matchStats, setMatchStats] = useState({\n    total: 0,\n    matched: 0,\n    unmatched: 0,\n    byPOS: {}\n  });\n  const [showUnmatched, setShowUnmatched] = useState(false);\n\n  // Refs for scrolling\n  const resultsRef = useRef(null);\n\n  // Load the reference data from textarea\n  const loadReferenceData = () => {\n    if (!referenceCSV.trim()) {\n      setError('Please paste your reference lemma data first.');\n      return;\n    }\n    try {\n      setLoading(true);\n      setError('');\n      Papa.parse(referenceCSV, {\n        header: true,\n        skipEmptyLines: true,\n        dynamicTyping: true,\n        complete: result => {\n          // Check if the CSV has the required columns\n          if (result.data.length > 0) {\n            const firstRow = result.data[0];\n\n            // Check if the lemma data has the necessary columns\n            if (!firstRow['Words (Frequency)'] && !firstRow['Lemma']) {\n              setError('Reference CSV must have \"Words (Frequency)\" and \"Lemma\" columns. Please check your format.');\n              setLoading(false);\n              return;\n            }\n            setReferenceData(result.data);\n\n            // Create an efficient index for lookups\n            const wordIndex = {};\n            const substringIndex = {};\n            result.data.forEach((row, rowIdx) => {\n              if (row['Words (Frequency)']) {\n                const wordString = row['Words (Frequency)'].toLowerCase();\n\n                // Extract individual words and their frequencies\n                const wordEntries = wordString.split(',');\n                for (const entry of wordEntries) {\n                  const trimmed = entry.trim();\n                  // Try to match the pattern \"word (count)\"\n                  const match = trimmed.match(/^([^\\(]+)(?:\\s*\\(\\d+\\))?/);\n                  if (match) {\n                    const word = match[1].trim().toLowerCase();\n\n                    // Exact match index\n                    if (!wordIndex[word]) {\n                      wordIndex[word] = [];\n                    }\n                    wordIndex[word].push(rowIdx);\n\n                    // Add word parts to substring index (for more flexible matching)\n                    for (let i = 0; i < word.length - 2; i++) {\n                      const substr = word.substring(i, i + 3);\n                      if (!substringIndex[substr]) {\n                        substringIndex[substr] = new Set();\n                      }\n                      substringIndex[substr].add(rowIdx);\n                    }\n                  }\n                }\n              }\n            });\n            setIndexedData({\n              exact: wordIndex,\n              substring: substringIndex\n            });\n            setReferenceLoaded(true);\n            setLoading(false);\n          } else {\n            setError('Reference CSV appears to be empty. Please check your data.');\n            setLoading(false);\n          }\n        },\n        error: error => {\n          setError('Error parsing reference CSV: ' + error.message);\n          setLoading(false);\n        }\n      });\n    } catch (err) {\n      setError('Failed to process reference CSV: ' + err.message);\n      setLoading(false);\n    }\n  };\n\n  // Parse the user-provided CSV data\n  const parseUserCSV = () => {\n    if (!userCSV.trim()) return;\n    try {\n      Papa.parse(userCSV, {\n        header: true,\n        skipEmptyLines: true,\n        dynamicTyping: true,\n        complete: result => {\n          // Check if the CSV has the required columns\n          if (result.data.length > 0) {\n            const firstRow = result.data[0];\n            if (!('Word' in firstRow) && !('word' in firstRow)) {\n              setError('CSV must have a \"Word\" column. Please check your CSV format.');\n              return;\n            }\n\n            // Normalize column names (handle case variations)\n            const normalizedData = result.data.map(row => {\n              const normalizedRow = {};\n\n              // Handle different column case names\n              Object.keys(row).forEach(key => {\n                const lowerKey = key.toLowerCase();\n                if (lowerKey === 'word') {\n                  normalizedRow.Word = row[key];\n                } else if (lowerKey === 'freq' || lowerKey === 'frequency') {\n                  normalizedRow.Freq = row[key];\n                } else {\n                  normalizedRow[key] = row[key];\n                }\n              });\n              return normalizedRow;\n            });\n            setCsvData(normalizedData);\n            setCurrentBatch(1);\n            setMatchedResults([]);\n            setMatchStats({\n              total: normalizedData.length,\n              matched: 0,\n              unmatched: 0,\n              byPOS: {}\n            });\n            setParseProgress(0);\n          } else {\n            setError('CSV appears to be empty. Please check your data.');\n          }\n        },\n        error: error => {\n          setError('Error parsing your CSV: ' + error.message);\n        }\n      });\n    } catch (err) {\n      setError('Failed to process CSV: ' + err.message);\n    }\n  };\n\n  // Find matches for a word\n  const findMatches = word => {\n    if (!word || typeof word !== 'string') return [];\n    const searchWord = word.toLowerCase().trim();\n\n    // Start with exact matches\n    if (indexedData.exact && indexedData.exact[searchWord]) {\n      return indexedData.exact[searchWord].map(idx => referenceData[idx]);\n    }\n\n    // If no exact matches, try substring matching\n    if (indexedData.substring) {\n      // Get trigrams from the search word\n      const trigrams = new Set();\n      for (let i = 0; i < searchWord.length - 2; i++) {\n        trigrams.add(searchWord.substring(i, i + 3));\n      }\n\n      // Find candidates with matching trigrams\n      const candidates = new Set();\n      trigrams.forEach(trigram => {\n        if (indexedData.substring[trigram]) {\n          indexedData.substring[trigram].forEach(idx => candidates.add(idx));\n        }\n      });\n\n      // Check each candidate\n      const results = [];\n      candidates.forEach(idx => {\n        const row = referenceData[idx];\n        const wordString = row['Words (Frequency)'].toLowerCase();\n\n        // Check if any word form contains the search term\n        const wordEntries = wordString.split(',');\n        for (const entry of wordEntries) {\n          const trimmed = entry.trim();\n          const match = trimmed.match(/^([^\\(]+)(?:\\s*\\(\\d+\\))?/);\n          if (match) {\n            const candidateWord = match[1].trim().toLowerCase();\n            if (candidateWord.includes(searchWord) || searchWord.includes(candidateWord)) {\n              results.push(row);\n              break;\n            }\n          }\n        }\n      });\n      return results;\n    }\n    return [];\n  };\n\n  // Process the current batch\n  const processBatch = () => {\n    if (csvData.length === 0) return;\n    setProcessingBatch(true);\n\n    // Calculate batch indices\n    const startIdx = (currentBatch - 1) * batchSize;\n    const endIdx = Math.min(startIdx + batchSize, csvData.length);\n\n    // Get the current batch\n    const currentItems = csvData.slice(startIdx, endIdx);\n\n    // Use a timeout to give the UI a chance to update\n    setTimeout(() => {\n      // Process each word in the batch\n      const batchResults = [];\n      const newMatchStats = {\n        ...matchStats\n      };\n      currentItems.forEach((item, idx) => {\n        const word = item.Word || '';\n        const frequency = item.Freq || 0;\n\n        // Find matches for this word\n        const matches = findMatches(word);\n\n        // Update statistics\n        if (matches.length > 0) {\n          newMatchStats.matched += 1;\n\n          // Update POS statistics\n          matches.forEach(match => {\n            const pos = match.POS || 'Unknown';\n            newMatchStats.byPOS[pos] = (newMatchStats.byPOS[pos] || 0) + 1;\n          });\n        } else {\n          newMatchStats.unmatched += 1;\n        }\n\n        // Add to results\n        batchResults.push({\n          word,\n          frequency,\n          matches,\n          originalIndex: startIdx + idx\n        });\n\n        // Update progress\n        setParseProgress(Math.round((startIdx + idx + 1) / csvData.length * 100));\n      });\n\n      // Update state with new results\n      setMatchedResults(prev => [...prev, ...batchResults]);\n      setMatchStats(newMatchStats);\n      setProcessingBatch(false);\n\n      // Scroll to results\n      if (resultsRef.current) {\n        resultsRef.current.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    }, 100);\n  };\n\n  // Process next batch\n  const processNextBatch = () => {\n    if (currentBatch * batchSize < csvData.length) {\n      setCurrentBatch(prev => prev + 1);\n    }\n  };\n\n  // Reset all results\n  const resetResults = () => {\n    setCsvData([]);\n    setMatchedResults([]);\n    setParseProgress(0);\n    setCurrentBatch(1);\n    setMatchStats({\n      total: 0,\n      matched: 0,\n      unmatched: 0,\n      byPOS: {}\n    });\n  };\n\n  // Copy results to clipboard\n  const copyResultsToClipboard = () => {\n    if (matchedResults.length === 0) return;\n    try {\n      // Generate the data to copy\n      const data = generateExportData();\n\n      // Copy to clipboard\n      navigator.clipboard.writeText(data).then(() => {\n        // Show success message\n        setError('Results copied to clipboard successfully!');\n        setTimeout(() => setError(''), 3000);\n      }).catch(err => {\n        // Fallback method for older browsers\n        const textArea = document.createElement('textarea');\n        textArea.value = data;\n        textArea.style.position = 'fixed'; // Avoid scrolling to bottom\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        try {\n          const successful = document.execCommand('copy');\n          if (successful) {\n            setError('Results copied to clipboard successfully!');\n          } else {\n            setError('Unable to copy results. You may need to copy manually from the table.');\n          }\n          setTimeout(() => setError(''), 3000);\n        } catch (err) {\n          setError('Unable to copy results. You may need to copy manually from the table.');\n          setTimeout(() => setError(''), 3000);\n        }\n        document.body.removeChild(textArea);\n      });\n    } catch (err) {\n      setError('Failed to copy: ' + err.message);\n      setTimeout(() => setError(''), 3000);\n    }\n  };\n\n  // Generate export data in TSV format\n  const generateExportData = () => {\n    const headers = \"Word\\tFrequency\\tLemma\\tPOS\\tGloss\\n\";\n    const rows = matchedResults.flatMap(result => {\n      if (result.matches.length === 0) {\n        // If showing unmatched words, include them with empty lemma/POS/gloss\n        return showUnmatched ? [`${result.word}\\t${result.frequency}\\t\\t\\t`] : [];\n      }\n\n      // Generate a row for each match\n      return result.matches.map(match => `${result.word}\\t${result.frequency}\\t${match.Lemma || ''}\\t${match.POS || ''}\\t${match.Gloss || ''}`);\n    }).join('\\n');\n    return headers + rows;\n  };\n\n  // Trigger batch processing when currentBatch changes\n  useEffect(() => {\n    if (csvData.length > 0 && !processingBatch) {\n      processBatch();\n    }\n  }, [currentBatch, csvData]);\n\n  // Calculate if we have more batches to process\n  const hasMoreBatches = csvData.length > 0 && currentBatch * batchSize < csvData.length;\n\n  // Calculate how many words we've processed so far\n  const processedCount = Math.min(currentBatch * batchSize, csvData.length);\n\n  // Prepare data for the POS distribution chart\n  const chartData = Object.entries(matchStats.byPOS).map(([pos, count]) => ({\n    pos,\n    count,\n    percentage: Math.round(count / matchStats.matched * 100)\n  })).sort((a, b) => b.count - a.count);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 max-w-7xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"CSV Batch Lemma Matcher\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\",\n      children: [error, /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"float-right font-bold\",\n        onClick: () => setError(''),\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 9\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center py-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mb-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Processing data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded shadow\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-3\",\n          children: \"Step 1: Load Reference Lemma Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700 mb-1\",\n            children: \"Paste your lemmatized reference data (must include \\\"Words (Frequency)\\\", \\\"Lemma\\\", \\\"POS\\\", and \\\"Gloss\\\" columns):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"w-full p-2 border rounded h-32 font-mono text-sm\",\n            value: referenceCSV,\n            onChange: e => setReferenceCSV(e.target.value),\n            placeholder: `Words (Frequency),Lemma,Total,POS,Gloss\naris (3071), ariso (20), ari (19),არის,6907,VERB,is\n...`,\n            disabled: referenceLoaded\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex gap-3 items-center\",\n          children: [!referenceLoaded ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\",\n            onClick: loadReferenceData,\n            disabled: !referenceCSV.trim() || loading,\n            children: \"Load Reference Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm\",\n            children: [\"\\u2713 Reference data loaded (\", referenceData.length, \" entries)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 17\n          }, this), referenceLoaded && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"text-blue-600 hover:text-blue-800 text-sm\",\n            onClick: () => {\n              setReferenceLoaded(false);\n              setReferenceData([]);\n              setIndexedData({});\n            },\n            children: \"Reset Reference Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `bg-white p-4 rounded shadow ${!referenceLoaded ? 'opacity-50' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-3\",\n          children: \"Step 2: Input Your Word List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700 mb-1\",\n            children: \"Paste your CSV data (must include \\\"Word\\\" and optionally \\\"Freq\\\" columns):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"w-full p-2 border rounded h-48 font-mono text-sm\",\n            value: userCSV,\n            onChange: e => setUserCSV(e.target.value),\n            placeholder: \"Freq,Word\\n4943,da\\n3753,es\\n3510,ra\\n...\",\n            disabled: !referenceLoaded\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-wrap gap-3 items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\",\n            onClick: parseUserCSV,\n            disabled: !referenceLoaded || !userCSV.trim() || processingBatch,\n            children: \"Parse CSV\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"text-sm font-medium text-gray-700 mr-2\",\n              children: \"Batch Size:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 514,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"border rounded p-1\",\n              value: batchSize,\n              onChange: e => setBatchSize(Number(e.target.value)),\n              disabled: !referenceLoaded,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: 100,\n                children: \"100 words\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 523,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: 250,\n                children: \"250 words\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 524,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: 500,\n                children: \"500 words\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 525,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: 1000,\n                children: \"1000 words\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 526,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: 2000,\n                children: \"2000 words\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 527,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 15\n          }, this), csvData.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm text-gray-600\",\n            children: [processedCount, \" of \", csvData.length, \" words processed (\", Math.round(processedCount / csvData.length * 100), \"%)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 17\n          }, this), csvData.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"text-red-600 hover:text-red-800 text-sm\",\n            onClick: resetResults,\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 13\n        }, this), parseProgress > 0 && parseProgress < 100 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-full bg-gray-200 rounded-full h-2.5 mt-4\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-blue-600 h-2.5 rounded-full\",\n            style: {\n              width: `${parseProgress}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 11\n      }, this), matchedResults.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded shadow\",\n        ref: resultsRef,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-3\",\n          children: \"Step 3: Matching Results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gray-50 p-3 rounded\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"font-semibold mb-2\",\n              children: \"Summary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 564,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"space-y-1\",\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Total Words: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium\",\n                  children: matchStats.total\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 566,\n                  columnNumber: 38\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 566,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Words Processed: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium\",\n                  children: processedCount\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 567,\n                  columnNumber: 42\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 567,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Matched Words: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium text-green-600\",\n                  children: matchStats.matched\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 568,\n                  columnNumber: 40\n                }, this), \" (\", Math.round(matchStats.matched / processedCount * 100), \"%)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 568,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Unmatched Words: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium text-red-600\",\n                  children: matchStats.unmatched\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 569,\n                  columnNumber: 42\n                }, this), \" (\", Math.round(matchStats.unmatched / processedCount * 100), \"%)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 569,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 565,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 17\n          }, this), chartData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gray-50 p-3 rounded h-64\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"font-semibold mb-2\",\n              children: \"POS Distribution\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 575,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n              width: \"100%\",\n              height: \"90%\",\n              children: /*#__PURE__*/_jsxDEV(BarChart, {\n                data: chartData.slice(0, 10) // Show top 10 POS categories\n                ,\n                margin: {\n                  top: 5,\n                  right: 20,\n                  left: 10,\n                  bottom: 5\n                },\n                children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                  strokeDasharray: \"3 3\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 581,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                  dataKey: \"pos\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 582,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 583,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                  formatter: (value, name, props) => [`${value} (${props.payload.percentage}%)`, 'Count']\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 584,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Bar, {\n                  dataKey: \"count\",\n                  fill: \"#3b82f6\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 585,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 577,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 576,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 574,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-wrap gap-3 mb-4\",\n          children: [hasMoreBatches && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded\",\n            onClick: processNextBatch,\n            disabled: processingBatch,\n            children: processingBatch ? /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Processing...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 600,\n              columnNumber: 23\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Process Next Batch (\", Math.min(batchSize, csvData.length - processedCount), \" words)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 602,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\",\n            onClick: copyResultsToClipboard,\n            disabled: matchedResults.length === 0,\n            children: \"Copy Results to Clipboard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center ml-auto\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: \"showUnmatched\",\n              checked: showUnmatched,\n              onChange: e => setShowUnmatched(e.target.checked),\n              className: \"mr-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 616,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"showUnmatched\",\n              className: \"text-sm\",\n              children: \"Show unmatched words\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 623,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 615,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overflow-x-auto\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"min-w-full border-collapse border border-gray-300\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                className: \"bg-gray-100\",\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"Word\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 633,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"Frequency\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 634,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"Lemma\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 635,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"POS\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 636,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"Gloss\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 637,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 632,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 631,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: matchedResults.map(result => {\n                if (result.matches.length === 0) {\n                  // If no matches and we're not showing unmatched, skip\n                  if (!showUnmatched) return null;\n\n                  // Show unmatched word with empty cells\n                  return /*#__PURE__*/_jsxDEV(\"tr\", {\n                    className: \"bg-red-50\",\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2\",\n                      children: result.word\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 649,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2\",\n                      children: result.frequency\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 650,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2 text-red-500\",\n                      children: \"Not found\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 651,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2\",\n                      children: \"-\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 652,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2\",\n                      children: \"-\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 653,\n                      columnNumber: 29\n                    }, this)]\n                  }, `unmatched-${result.originalIndex}`, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 648,\n                    columnNumber: 27\n                  }, this);\n                }\n\n                // For matched words, show a row for each match\n                return result.matches.map((match, matchIdx) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  className: matchIdx > 0 ? \"bg-blue-50\" : \"\",\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"border border-gray-300 px-4 py-2\",\n                    children: matchIdx === 0 ? result.word : \"\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 664,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"border border-gray-300 px-4 py-2\",\n                    children: matchIdx === 0 ? result.frequency : \"\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 667,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"border border-gray-300 px-4 py-2\",\n                    children: match.Lemma\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 670,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"border border-gray-300 px-4 py-2\",\n                    children: match.POS\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 671,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"border border-gray-300 px-4 py-2\",\n                    children: match.Gloss\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 672,\n                    columnNumber: 27\n                  }, this)]\n                }, `match-${result.originalIndex}-${matchIdx}`, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 660,\n                  columnNumber: 25\n                }, this));\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 640,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 630,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 15\n        }, this), hasMoreBatches && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4 text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded\",\n            onClick: processNextBatch,\n            disabled: processingBatch,\n            children: processingBatch ? /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Processing...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 688,\n              columnNumber: 23\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Process Next Batch (\", Math.min(batchSize, csvData.length - processedCount), \" words)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 690,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 682,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-blue-50 p-4 rounded\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"font-semibold mb-2\",\n          children: \"Instructions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 700,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          className: \"list-decimal pl-5 space-y-1\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Step 1:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 702,\n              columnNumber: 19\n            }, this), \" Paste your lemmatized reference data (the data with Words, Lemmas, POS, etc.) and click \\\"Load Reference Data\\\"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 702,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Step 2:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 703,\n              columnNumber: 19\n            }, this), \" Paste your word list CSV (with Word and Freq columns) and click \\\"Parse CSV\\\"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 703,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Step 3:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 704,\n              columnNumber: 19\n            }, this), \" The tool will process words in batches for better performance\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 704,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"After each batch is processed, review the matches and click \\\"Process Next Batch\\\" to continue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 705,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"When finished, use the \\\"Copy Results\\\" button to copy all matches to your clipboard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 706,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mt-2 text-sm text-gray-600\",\n          children: \"Note: This tool can handle thousands of words by processing them in batches. For very large lists, consider using smaller batch sizes if you experience performance issues.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 708,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 412,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"j/dbPDrTZ6/vxkgegLGgvMs8Fn4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Papa","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","jsxDEV","_jsxDEV","App","_s","referenceData","setReferenceData","indexedData","setIndexedData","loading","setLoading","error","setError","referenceLoaded","setReferenceLoaded","referenceCSV","setReferenceCSV","userCSV","setUserCSV","csvData","setCsvData","parseProgress","setParseProgress","batchSize","setBatchSize","currentBatch","setCurrentBatch","processingBatch","setProcessingBatch","matchedResults","setMatchedResults","matchStats","setMatchStats","total","matched","unmatched","byPOS","showUnmatched","setShowUnmatched","resultsRef","loadReferenceData","trim","parse","header","skipEmptyLines","dynamicTyping","complete","result","data","length","firstRow","wordIndex","substringIndex","forEach","row","rowIdx","wordString","toLowerCase","wordEntries","split","entry","trimmed","match","word","push","i","substr","substring","Set","add","exact","message","err","parseUserCSV","normalizedData","map","normalizedRow","Object","keys","key","lowerKey","Word","Freq","findMatches","searchWord","idx","trigrams","candidates","trigram","results","candidateWord","includes","processBatch","startIdx","endIdx","Math","min","currentItems","slice","setTimeout","batchResults","newMatchStats","item","frequency","matches","pos","POS","originalIndex","round","prev","current","scrollIntoView","behavior","processNextBatch","resetResults","copyResultsToClipboard","generateExportData","navigator","clipboard","writeText","then","catch","textArea","document","createElement","value","style","position","body","appendChild","focus","select","successful","execCommand","removeChild","headers","rows","flatMap","Lemma","Gloss","join","hasMoreBatches","processedCount","chartData","entries","count","percentage","sort","a","b","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","e","target","placeholder","disabled","Number","width","ref","height","margin","top","right","left","bottom","strokeDasharray","dataKey","formatter","name","props","payload","fill","type","id","checked","htmlFor","matchIdx","_c","$RefreshReg$"],"sources":["/Applications/CLANc/core-voc/lemma-matcher/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Papa from 'papaparse';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport './App.css';\n\nfunction App() {\n  // Reference data state\n  const [referenceData, setReferenceData] = useState([]);\n  const [indexedData, setIndexedData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [referenceLoaded, setReferenceLoaded] = useState(false);\n  const [referenceCSV, setReferenceCSV] = useState('');\n\n  // Input state\n  const [userCSV, setUserCSV] = useState('');\n  const [csvData, setCsvData] = useState([]);\n  const [parseProgress, setParseProgress] = useState(0);\n  const [batchSize, setBatchSize] = useState(500);\n  const [currentBatch, setCurrentBatch] = useState(1);\n  const [processingBatch, setProcessingBatch] = useState(false);\n\n  // Results state\n  const [matchedResults, setMatchedResults] = useState([]);\n  const [matchStats, setMatchStats] = useState({\n    total: 0,\n    matched: 0,\n    unmatched: 0,\n    byPOS: {}\n  });\n  const [showUnmatched, setShowUnmatched] = useState(false);\n\n  // Refs for scrolling\n  const resultsRef = useRef(null);\n\n  // Load the reference data from textarea\n  const loadReferenceData = () => {\n    if (!referenceCSV.trim()) {\n      setError('Please paste your reference lemma data first.');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError('');\n\n      Papa.parse(referenceCSV, {\n        header: true,\n        skipEmptyLines: true,\n        dynamicTyping: true,\n        complete: (result) => {\n          // Check if the CSV has the required columns\n          if (result.data.length > 0) {\n            const firstRow = result.data[0];\n\n            // Check if the lemma data has the necessary columns\n            if (!firstRow['Words (Frequency)'] && !firstRow['Lemma']) {\n              setError('Reference CSV must have \"Words (Frequency)\" and \"Lemma\" columns. Please check your format.');\n              setLoading(false);\n              return;\n            }\n\n            setReferenceData(result.data);\n\n            // Create an efficient index for lookups\n            const wordIndex = {};\n            const substringIndex = {};\n\n            result.data.forEach((row, rowIdx) => {\n              if (row['Words (Frequency)']) {\n                const wordString = row['Words (Frequency)'].toLowerCase();\n\n                // Extract individual words and their frequencies\n                const wordEntries = wordString.split(',');\n\n                for (const entry of wordEntries) {\n                  const trimmed = entry.trim();\n                  // Try to match the pattern \"word (count)\"\n                  const match = trimmed.match(/^([^\\(]+)(?:\\s*\\(\\d+\\))?/);\n\n                  if (match) {\n                    const word = match[1].trim().toLowerCase();\n\n                    // Exact match index\n                    if (!wordIndex[word]) {\n                      wordIndex[word] = [];\n                    }\n                    wordIndex[word].push(rowIdx);\n\n                    // Add word parts to substring index (for more flexible matching)\n                    for (let i = 0; i < word.length - 2; i++) {\n                      const substr = word.substring(i, i + 3);\n                      if (!substringIndex[substr]) {\n                        substringIndex[substr] = new Set();\n                      }\n                      substringIndex[substr].add(rowIdx);\n                    }\n                  }\n                }\n              }\n            });\n\n            setIndexedData({\n              exact: wordIndex,\n              substring: substringIndex\n            });\n\n            setReferenceLoaded(true);\n            setLoading(false);\n          } else {\n            setError('Reference CSV appears to be empty. Please check your data.');\n            setLoading(false);\n          }\n        },\n        error: (error) => {\n          setError('Error parsing reference CSV: ' + error.message);\n          setLoading(false);\n        }\n      });\n    } catch (err) {\n      setError('Failed to process reference CSV: ' + err.message);\n      setLoading(false);\n    }\n  };\n\n  // Parse the user-provided CSV data\n  const parseUserCSV = () => {\n    if (!userCSV.trim()) return;\n\n    try {\n      Papa.parse(userCSV, {\n        header: true,\n        skipEmptyLines: true,\n        dynamicTyping: true,\n        complete: (result) => {\n          // Check if the CSV has the required columns\n          if (result.data.length > 0) {\n            const firstRow = result.data[0];\n            if (!('Word' in firstRow) && !('word' in firstRow)) {\n              setError('CSV must have a \"Word\" column. Please check your CSV format.');\n              return;\n            }\n\n            // Normalize column names (handle case variations)\n            const normalizedData = result.data.map(row => {\n              const normalizedRow = {};\n\n              // Handle different column case names\n              Object.keys(row).forEach(key => {\n                const lowerKey = key.toLowerCase();\n                if (lowerKey === 'word') {\n                  normalizedRow.Word = row[key];\n                } else if (lowerKey === 'freq' || lowerKey === 'frequency') {\n                  normalizedRow.Freq = row[key];\n                } else {\n                  normalizedRow[key] = row[key];\n                }\n              });\n\n              return normalizedRow;\n            });\n\n            setCsvData(normalizedData);\n            setCurrentBatch(1);\n            setMatchedResults([]);\n            setMatchStats({\n              total: normalizedData.length,\n              matched: 0,\n              unmatched: 0,\n              byPOS: {}\n            });\n            setParseProgress(0);\n          } else {\n            setError('CSV appears to be empty. Please check your data.');\n          }\n        },\n        error: (error) => {\n          setError('Error parsing your CSV: ' + error.message);\n        }\n      });\n    } catch (err) {\n      setError('Failed to process CSV: ' + err.message);\n    }\n  };\n\n  // Find matches for a word\n  const findMatches = (word) => {\n    if (!word || typeof word !== 'string') return [];\n\n    const searchWord = word.toLowerCase().trim();\n\n    // Start with exact matches\n    if (indexedData.exact && indexedData.exact[searchWord]) {\n      return indexedData.exact[searchWord].map(idx => referenceData[idx]);\n    }\n\n    // If no exact matches, try substring matching\n    if (indexedData.substring) {\n      // Get trigrams from the search word\n      const trigrams = new Set();\n      for (let i = 0; i < searchWord.length - 2; i++) {\n        trigrams.add(searchWord.substring(i, i + 3));\n      }\n\n      // Find candidates with matching trigrams\n      const candidates = new Set();\n      trigrams.forEach(trigram => {\n        if (indexedData.substring[trigram]) {\n          indexedData.substring[trigram].forEach(idx => candidates.add(idx));\n        }\n      });\n\n      // Check each candidate\n      const results = [];\n      candidates.forEach(idx => {\n        const row = referenceData[idx];\n        const wordString = row['Words (Frequency)'].toLowerCase();\n\n        // Check if any word form contains the search term\n        const wordEntries = wordString.split(',');\n        for (const entry of wordEntries) {\n          const trimmed = entry.trim();\n          const match = trimmed.match(/^([^\\(]+)(?:\\s*\\(\\d+\\))?/);\n\n          if (match) {\n            const candidateWord = match[1].trim().toLowerCase();\n            if (candidateWord.includes(searchWord) || searchWord.includes(candidateWord)) {\n              results.push(row);\n              break;\n            }\n          }\n        }\n      });\n\n      return results;\n    }\n\n    return [];\n  };\n\n  // Process the current batch\n  const processBatch = () => {\n    if (csvData.length === 0) return;\n\n    setProcessingBatch(true);\n\n    // Calculate batch indices\n    const startIdx = (currentBatch - 1) * batchSize;\n    const endIdx = Math.min(startIdx + batchSize, csvData.length);\n\n    // Get the current batch\n    const currentItems = csvData.slice(startIdx, endIdx);\n\n    // Use a timeout to give the UI a chance to update\n    setTimeout(() => {\n      // Process each word in the batch\n      const batchResults = [];\n      const newMatchStats = {...matchStats};\n\n      currentItems.forEach((item, idx) => {\n        const word = item.Word || '';\n        const frequency = item.Freq || 0;\n\n        // Find matches for this word\n        const matches = findMatches(word);\n\n        // Update statistics\n        if (matches.length > 0) {\n          newMatchStats.matched += 1;\n\n          // Update POS statistics\n          matches.forEach(match => {\n            const pos = match.POS || 'Unknown';\n            newMatchStats.byPOS[pos] = (newMatchStats.byPOS[pos] || 0) + 1;\n          });\n        } else {\n          newMatchStats.unmatched += 1;\n        }\n\n        // Add to results\n        batchResults.push({\n          word,\n          frequency,\n          matches,\n          originalIndex: startIdx + idx\n        });\n\n        // Update progress\n        setParseProgress(Math.round(((startIdx + idx + 1) / csvData.length) * 100));\n      });\n\n      // Update state with new results\n      setMatchedResults(prev => [...prev, ...batchResults]);\n      setMatchStats(newMatchStats);\n      setProcessingBatch(false);\n\n      // Scroll to results\n      if (resultsRef.current) {\n        resultsRef.current.scrollIntoView({ behavior: 'smooth' });\n      }\n    }, 100);\n  };\n\n  // Process next batch\n  const processNextBatch = () => {\n    if (currentBatch * batchSize < csvData.length) {\n      setCurrentBatch(prev => prev + 1);\n    }\n  };\n\n  // Reset all results\n  const resetResults = () => {\n    setCsvData([]);\n    setMatchedResults([]);\n    setParseProgress(0);\n    setCurrentBatch(1);\n    setMatchStats({\n      total: 0,\n      matched: 0,\n      unmatched: 0,\n      byPOS: {}\n    });\n  };\n\n  // Copy results to clipboard\n  const copyResultsToClipboard = () => {\n    if (matchedResults.length === 0) return;\n\n    try {\n      // Generate the data to copy\n      const data = generateExportData();\n\n      // Copy to clipboard\n      navigator.clipboard.writeText(data)\n        .then(() => {\n          // Show success message\n          setError('Results copied to clipboard successfully!');\n          setTimeout(() => setError(''), 3000);\n        })\n        .catch(err => {\n          // Fallback method for older browsers\n          const textArea = document.createElement('textarea');\n          textArea.value = data;\n          textArea.style.position = 'fixed';  // Avoid scrolling to bottom\n          document.body.appendChild(textArea);\n          textArea.focus();\n          textArea.select();\n\n          try {\n            const successful = document.execCommand('copy');\n            if (successful) {\n              setError('Results copied to clipboard successfully!');\n            } else {\n              setError('Unable to copy results. You may need to copy manually from the table.');\n            }\n            setTimeout(() => setError(''), 3000);\n          } catch (err) {\n            setError('Unable to copy results. You may need to copy manually from the table.');\n            setTimeout(() => setError(''), 3000);\n          }\n\n          document.body.removeChild(textArea);\n        });\n    } catch (err) {\n      setError('Failed to copy: ' + err.message);\n      setTimeout(() => setError(''), 3000);\n    }\n  };\n\n  // Generate export data in TSV format\n  const generateExportData = () => {\n    const headers = \"Word\\tFrequency\\tLemma\\tPOS\\tGloss\\n\";\n\n    const rows = matchedResults.flatMap(result => {\n      if (result.matches.length === 0) {\n        // If showing unmatched words, include them with empty lemma/POS/gloss\n        return showUnmatched ? [`${result.word}\\t${result.frequency}\\t\\t\\t`] : [];\n      }\n\n      // Generate a row for each match\n      return result.matches.map(match =>\n        `${result.word}\\t${result.frequency}\\t${match.Lemma || ''}\\t${match.POS || ''}\\t${match.Gloss || ''}`\n      );\n    }).join('\\n');\n\n    return headers + rows;\n  };\n\n  // Trigger batch processing when currentBatch changes\n  useEffect(() => {\n    if (csvData.length > 0 && !processingBatch) {\n      processBatch();\n    }\n  }, [currentBatch, csvData]);\n\n  // Calculate if we have more batches to process\n  const hasMoreBatches = csvData.length > 0 && currentBatch * batchSize < csvData.length;\n\n  // Calculate how many words we've processed so far\n  const processedCount = Math.min(currentBatch * batchSize, csvData.length);\n\n  // Prepare data for the POS distribution chart\n  const chartData = Object.entries(matchStats.byPOS)\n    .map(([pos, count]) => ({\n      pos,\n      count,\n      percentage: Math.round((count / matchStats.matched) * 100)\n    }))\n    .sort((a, b) => b.count - a.count);\n\n  return (\n    <div className=\"p-4 max-w-7xl mx-auto\">\n      <h1 className=\"text-2xl font-bold mb-4\">CSV Batch Lemma Matcher</h1>\n\n      {error && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\">\n          {error}\n          <button\n            className=\"float-right font-bold\"\n            onClick={() => setError('')}\n          >\n            ×\n          </button>\n        </div>\n      )}\n\n      {loading ? (\n        <div className=\"text-center py-8\">\n          <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mb-2\"></div>\n          <p>Processing data...</p>\n        </div>\n      ) : (\n        <div className=\"space-y-6\">\n          {/* Step 1: Load reference data */}\n          <div className=\"bg-white p-4 rounded shadow\">\n            <h2 className=\"text-xl font-semibold mb-3\">Step 1: Load Reference Lemma Data</h2>\n\n            <div className=\"mb-3\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Paste your lemmatized reference data (must include \"Words (Frequency)\", \"Lemma\", \"POS\", and \"Gloss\" columns):\n              </label>\n              <textarea\n                className=\"w-full p-2 border rounded h-32 font-mono text-sm\"\n                value={referenceCSV}\n                onChange={(e) => setReferenceCSV(e.target.value)}\n                placeholder={`Words (Frequency),Lemma,Total,POS,Gloss\naris (3071), ariso (20), ari (19),არის,6907,VERB,is\n...`}\n                disabled={referenceLoaded}\n              />\n            </div>\n\n            <div className=\"flex gap-3 items-center\">\n              {!referenceLoaded ? (\n                <button\n                  className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\"\n                  onClick={loadReferenceData}\n                  disabled={!referenceCSV.trim() || loading}\n                >\n                  Load Reference Data\n                </button>\n              ) : (\n                <div className=\"bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm\">\n                  ✓ Reference data loaded ({referenceData.length} entries)\n                </div>\n              )}\n\n              {referenceLoaded && (\n                <button\n                  className=\"text-blue-600 hover:text-blue-800 text-sm\"\n                  onClick={() => {\n                    setReferenceLoaded(false);\n                    setReferenceData([]);\n                    setIndexedData({});\n                  }}\n                >\n                  Reset Reference Data\n                </button>\n              )}\n            </div>\n          </div>\n\n          {/* Step 2: Input word list */}\n          <div className={`bg-white p-4 rounded shadow ${!referenceLoaded ? 'opacity-50' : ''}`}>\n            <h2 className=\"text-xl font-semibold mb-3\">Step 2: Input Your Word List</h2>\n\n            <div className=\"mb-3\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Paste your CSV data (must include \"Word\" and optionally \"Freq\" columns):\n              </label>\n              <textarea\n                className=\"w-full p-2 border rounded h-48 font-mono text-sm\"\n                value={userCSV}\n                onChange={(e) => setUserCSV(e.target.value)}\n                placeholder=\"Freq,Word\n4943,da\n3753,es\n3510,ra\n...\"\n                disabled={!referenceLoaded}\n              />\n            </div>\n\n            <div className=\"flex flex-wrap gap-3 items-center\">\n              <button\n                className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\"\n                onClick={parseUserCSV}\n                disabled={!referenceLoaded || !userCSV.trim() || processingBatch}\n              >\n                Parse CSV\n              </button>\n\n              <div className=\"flex items-center\">\n                <label className=\"text-sm font-medium text-gray-700 mr-2\">\n                  Batch Size:\n                </label>\n                <select\n                  className=\"border rounded p-1\"\n                  value={batchSize}\n                  onChange={(e) => setBatchSize(Number(e.target.value))}\n                  disabled={!referenceLoaded}\n                >\n                  <option value={100}>100 words</option>\n                  <option value={250}>250 words</option>\n                  <option value={500}>500 words</option>\n                  <option value={1000}>1000 words</option>\n                  <option value={2000}>2000 words</option>\n                </select>\n              </div>\n\n              {csvData.length > 0 && (\n                <span className=\"text-sm text-gray-600\">\n                  {processedCount} of {csvData.length} words processed ({Math.round((processedCount / csvData.length) * 100)}%)\n                </span>\n              )}\n\n              {csvData.length > 0 && (\n                <button\n                  className=\"text-red-600 hover:text-red-800 text-sm\"\n                  onClick={resetResults}\n                >\n                  Reset\n                </button>\n              )}\n            </div>\n\n            {parseProgress > 0 && parseProgress < 100 && (\n              <div className=\"w-full bg-gray-200 rounded-full h-2.5 mt-4\">\n                <div\n                  className=\"bg-blue-600 h-2.5 rounded-full\"\n                  style={{ width: `${parseProgress}%` }}\n                ></div>\n              </div>\n            )}\n          </div>\n\n          {/* Step 3: Results */}\n          {matchedResults.length > 0 && (\n            <div className=\"bg-white p-4 rounded shadow\" ref={resultsRef}>\n              <h2 className=\"text-xl font-semibold mb-3\">Step 3: Matching Results</h2>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                <div className=\"bg-gray-50 p-3 rounded\">\n                  <h3 className=\"font-semibold mb-2\">Summary</h3>\n                  <ul className=\"space-y-1\">\n                    <li>Total Words: <span className=\"font-medium\">{matchStats.total}</span></li>\n                    <li>Words Processed: <span className=\"font-medium\">{processedCount}</span></li>\n                    <li>Matched Words: <span className=\"font-medium text-green-600\">{matchStats.matched}</span> ({Math.round((matchStats.matched / processedCount) * 100)}%)</li>\n                    <li>Unmatched Words: <span className=\"font-medium text-red-600\">{matchStats.unmatched}</span> ({Math.round((matchStats.unmatched / processedCount) * 100)}%)</li>\n                  </ul>\n                </div>\n\n                {chartData.length > 0 && (\n                  <div className=\"bg-gray-50 p-3 rounded h-64\">\n                    <h3 className=\"font-semibold mb-2\">POS Distribution</h3>\n                    <ResponsiveContainer width=\"100%\" height=\"90%\">\n                      <BarChart\n                        data={chartData.slice(0, 10)} // Show top 10 POS categories\n                        margin={{ top: 5, right: 20, left: 10, bottom: 5 }}\n                      >\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"pos\" />\n                        <YAxis />\n                        <Tooltip formatter={(value, name, props) => [`${value} (${props.payload.percentage}%)`, 'Count']} />\n                        <Bar dataKey=\"count\" fill=\"#3b82f6\" />\n                      </BarChart>\n                    </ResponsiveContainer>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"flex flex-wrap gap-3 mb-4\">\n                {hasMoreBatches && (\n                  <button\n                    className=\"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded\"\n                    onClick={processNextBatch}\n                    disabled={processingBatch}\n                  >\n                    {processingBatch ? (\n                      <span>Processing...</span>\n                    ) : (\n                      <span>Process Next Batch ({Math.min(batchSize, csvData.length - processedCount)} words)</span>\n                    )}\n                  </button>\n                )}\n\n                <button\n                  className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\"\n                  onClick={copyResultsToClipboard}\n                  disabled={matchedResults.length === 0}\n                >\n                  Copy Results to Clipboard\n                </button>\n\n                <div className=\"flex items-center ml-auto\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"showUnmatched\"\n                    checked={showUnmatched}\n                    onChange={(e) => setShowUnmatched(e.target.checked)}\n                    className=\"mr-2\"\n                  />\n                  <label htmlFor=\"showUnmatched\" className=\"text-sm\">\n                    Show unmatched words\n                  </label>\n                </div>\n              </div>\n\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full border-collapse border border-gray-300\">\n                  <thead>\n                    <tr className=\"bg-gray-100\">\n                      <th className=\"border border-gray-300 px-4 py-2 text-left\">Word</th>\n                      <th className=\"border border-gray-300 px-4 py-2 text-left\">Frequency</th>\n                      <th className=\"border border-gray-300 px-4 py-2 text-left\">Lemma</th>\n                      <th className=\"border border-gray-300 px-4 py-2 text-left\">POS</th>\n                      <th className=\"border border-gray-300 px-4 py-2 text-left\">Gloss</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {matchedResults.map((result) => {\n                      if (result.matches.length === 0) {\n                        // If no matches and we're not showing unmatched, skip\n                        if (!showUnmatched) return null;\n\n                        // Show unmatched word with empty cells\n                        return (\n                          <tr key={`unmatched-${result.originalIndex}`} className=\"bg-red-50\">\n                            <td className=\"border border-gray-300 px-4 py-2\">{result.word}</td>\n                            <td className=\"border border-gray-300 px-4 py-2\">{result.frequency}</td>\n                            <td className=\"border border-gray-300 px-4 py-2 text-red-500\">Not found</td>\n                            <td className=\"border border-gray-300 px-4 py-2\">-</td>\n                            <td className=\"border border-gray-300 px-4 py-2\">-</td>\n                          </tr>\n                        );\n                      }\n\n                      // For matched words, show a row for each match\n                      return result.matches.map((match, matchIdx) => (\n                        <tr\n                          key={`match-${result.originalIndex}-${matchIdx}`}\n                          className={matchIdx > 0 ? \"bg-blue-50\" : \"\"}\n                        >\n                          <td className=\"border border-gray-300 px-4 py-2\">\n                            {matchIdx === 0 ? result.word : \"\"}\n                          </td>\n                          <td className=\"border border-gray-300 px-4 py-2\">\n                            {matchIdx === 0 ? result.frequency : \"\"}\n                          </td>\n                          <td className=\"border border-gray-300 px-4 py-2\">{match.Lemma}</td>\n                          <td className=\"border border-gray-300 px-4 py-2\">{match.POS}</td>\n                          <td className=\"border border-gray-300 px-4 py-2\">{match.Gloss}</td>\n                        </tr>\n                      ));\n                    })}\n                  </tbody>\n                </table>\n              </div>\n\n              {hasMoreBatches && (\n                <div className=\"mt-4 text-center\">\n                  <button\n                    className=\"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded\"\n                    onClick={processNextBatch}\n                    disabled={processingBatch}\n                  >\n                    {processingBatch ? (\n                      <span>Processing...</span>\n                    ) : (\n                      <span>Process Next Batch ({Math.min(batchSize, csvData.length - processedCount)} words)</span>\n                    )}\n                  </button>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Instructions */}\n          <div className=\"bg-blue-50 p-4 rounded\">\n            <h3 className=\"font-semibold mb-2\">Instructions</h3>\n            <ol className=\"list-decimal pl-5 space-y-1\">\n              <li><strong>Step 1:</strong> Paste your lemmatized reference data (the data with Words, Lemmas, POS, etc.) and click \"Load Reference Data\"</li>\n              <li><strong>Step 2:</strong> Paste your word list CSV (with Word and Freq columns) and click \"Parse CSV\"</li>\n              <li><strong>Step 3:</strong> The tool will process words in batches for better performance</li>\n              <li>After each batch is processed, review the matches and click \"Process Next Batch\" to continue</li>\n              <li>When finished, use the \"Copy Results\" button to copy all matches to your clipboard</li>\n            </ol>\n            <p className=\"mt-2 text-sm text-gray-600\">\n              Note: This tool can handle thousands of words by processing them in batches. For very large lists,\n              consider using smaller batch sizes if you experience performance issues.\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}