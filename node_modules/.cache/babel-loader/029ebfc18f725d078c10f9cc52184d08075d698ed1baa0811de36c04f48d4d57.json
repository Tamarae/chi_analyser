{"ast":null,"code":"var _jsxFileName = \"/Users/tamarkalkhitashvili/Documents/chi_analyser/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Papa from 'papaparse';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Reference data state\n  const [referenceData, setReferenceData] = useState([]);\n  const [indexedData, setIndexedData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [referenceLoaded, setReferenceLoaded] = useState(false);\n  const [referenceCSV, setReferenceCSV] = useState('');\n\n  // Georgian to Latin transcription mapping\n  const georgianToLatin = {\n    'ა': 'a',\n    'ბ': 'b',\n    'გ': 'g',\n    'დ': 'd',\n    'ე': 'e',\n    'ვ': 'v',\n    'ზ': 'z',\n    'თ': 't',\n    'ი': 'i',\n    'კ': 'k',\n    'ლ': 'l',\n    'მ': 'm',\n    'ნ': 'n',\n    'ო': 'o',\n    'პ': 'p',\n    'ჟ': 'zh',\n    'რ': 'r',\n    'ს': 's',\n    'ტ': 't',\n    'უ': 'u',\n    'ფ': 'f',\n    'ქ': 'k',\n    'ღ': 'gh',\n    'ყ': 'q',\n    'შ': 'sh',\n    'ჩ': 'ch',\n    'ც': 'c',\n    'ძ': 'dz',\n    'წ': 'c',\n    'ჭ': 'ch',\n    'ხ': 'x',\n    'ჯ': 'j',\n    'ჰ': 'h'\n  };\n\n  // Helper function to count morphemes\n  const countMorphemes = morphemes => {\n    if (!morphemes || typeof morphemes !== 'string' || morphemes.trim() === '') return 0;\n    return morphemes.split('-').filter(part => part.trim().length > 0).length;\n  };\n\n  // REFINED Georgian morphological analyzer\n  const georgianMorphologyAnalyzer = {\n    preverbs: ['გა', 'მო', 'და', 'ა', 'შე', 'წა', 'მი', 'გადა', 'გამო', 'შემო', 'ჩა', 'ამო', 'წამო', 'გან'],\n    personMarkers: {\n      'ვ': '1SUBJ',\n      'მ': '1OBJ',\n      'გ': '2OBJ',\n      'ჰ': '3OBJ',\n      'ს': '3OBJ/3SUBJ',\n      'ხ': '2SUBJ',\n      'გვ': '1plOBJ',\n      'თ': '2plSUBJ/PL',\n      'ან': '3plSUBJ',\n      'ენ': '3plSUBJ',\n      'ეს': '3plSUBJ',\n      'ნენ': '3plSUBJ'\n    },\n    versionVowels: {\n      'ა': 'VER.VOW',\n      'ი': 'VER.VOW',\n      'უ': 'VER.VOW',\n      'ე': 'VER.VOW'\n    },\n    tenseAspectMood: {\n      'ებ': 'TAM (Present/Future Stem)',\n      'ობ': 'TAM (Present/Future Stem)',\n      'ავ': 'TAM (Present/Future Stem)',\n      'ამ': 'TAM (Present/Future Stem)',\n      'ი': 'TAM (Aorist/Perfect)',\n      'ა': 'TAM (Aorist/Perfect)',\n      'ე': 'TAM (Aorist/Imperative)',\n      'ო': 'TAM (Optative)',\n      'ს': 'TAM (3sg Present)',\n      'დ': 'TAM (Imperfect/Passive)',\n      'ილ': 'TAM (Perfect Participle)',\n      'ულ': 'TAM (Past Participle)'\n    },\n    nounAffixes: {\n      'ი': 'CASE (Nominative)',\n      'მა': 'CASE (Ergative)',\n      'მ': 'CASE (Ergative)',\n      'ს': 'CASE (Genitive/Dative)',\n      'ით': 'CASE (Instrumental)',\n      'ად': 'CASE (Adverbial)',\n      'ო': 'CASE (Vocative)',\n      'ში': 'CASE (Inessive)',\n      'ზე': 'CASE (Superessive)',\n      'დან': 'CASE (Ablative)',\n      'მდე': 'CASE (Terminative)',\n      'თან': 'CASE (Comitative)',\n      'კენ': 'CASE (Adessive)',\n      'გან': 'CASE (Originative)',\n      'ებ': 'PL',\n      'ნი': 'PL'\n    },\n    particles: {\n      'ც': 'PART (also/too)',\n      'ო': 'PART (Quotative)',\n      'მეთქი': 'PART (I said)',\n      'ვე': 'PART (indeed)',\n      'ღა': 'PART (else)'\n    },\n    derivational: {\n      'ელ': 'DER (Origin)',\n      'ურ': 'DER (Adjective)',\n      'იკო': 'DER (Diminutive)',\n      'უნა': 'DER (Diminutive)',\n      'ულ': 'DER (Adjective)',\n      'იან': 'DER (Possessive Adj)',\n      'ობ': 'DER (Abstract Noun)',\n      'სა': 'DER (Purpose)'\n    }\n  };\n\n  // REFINED function to analyze morpheme structure\n  const analyzeMorphemeStructure = (morphemes, pos) => {\n    if (!morphemes || typeof morphemes !== 'string' || morphemes.trim() === '') {\n      return {\n        structure: 'No morphemes',\n        analysis: 'No morphological data available',\n        complexity: 0,\n        pattern: 'SIMPLE'\n      };\n    }\n    const parts = morphemes.split('-').filter(part => part.trim().length > 0);\n    const structure = [];\n    const analysis = [];\n    let rootFound = false;\n    parts.forEach((part, index) => {\n      const cleanPart = part.trim();\n      let identified = false;\n      if (georgianMorphologyAnalyzer.preverbs.includes(cleanPart) && index < 2) {\n        structure.push('PREV');\n        analysis.push(`${cleanPart}(preverb)`);\n        identified = true;\n      }\n      if (!identified && georgianMorphologyAnalyzer.personMarkers[cleanPart]) {\n        const role = georgianMorphologyAnalyzer.personMarkers[cleanPart];\n        structure.push(`PERS.${role.includes('SUBJ') ? 'S' : 'O'}`);\n        analysis.push(`${cleanPart}(${role.toLowerCase()})`);\n        identified = true;\n      }\n      if (!identified && pos === 'VERB' && georgianMorphologyAnalyzer.versionVowels[cleanPart] && index < parts.length - 1) {\n        structure.push('VER.VOW');\n        analysis.push(`${cleanPart}(version vowel)`);\n        identified = true;\n      }\n\n      // **CRITICAL FIX HERE**: Added pos === 'VERB' check\n      if (!identified && pos === 'VERB' && georgianMorphologyAnalyzer.tenseAspectMood[cleanPart]) {\n        const role = georgianMorphologyAnalyzer.tenseAspectMood[cleanPart];\n        if (cleanPart === 'დ') {\n          structure.push('PASS');\n          analysis.push(`${cleanPart}(passive/medial)`);\n        } else {\n          structure.push('TAM');\n          analysis.push(`${cleanPart}(${role.replace('TAM ', '')})`);\n        }\n        identified = true;\n      }\n      if (!identified && (pos === 'NOUN' || pos === 'PROPN' || pos === 'PRON' || pos === 'ADJ' || pos === 'PTCPL') && georgianMorphologyAnalyzer.nounAffixes[cleanPart]) {\n        const role = georgianMorphologyAnalyzer.nounAffixes[cleanPart];\n        structure.push(role.startsWith('CASE') ? 'CASE' : role);\n        analysis.push(`${cleanPart}(${role.replace('CASE ', '').toLowerCase()})`);\n        identified = true;\n      }\n      if (!identified && georgianMorphologyAnalyzer.particles[cleanPart]) {\n        structure.push('PART');\n        analysis.push(`${cleanPart}(${georgianMorphologyAnalyzer.particles[cleanPart].replace('PART ', '').toLowerCase()})`);\n        identified = true;\n      }\n      if (!identified && georgianMorphologyAnalyzer.derivational[cleanPart]) {\n        structure.push('DER');\n        analysis.push(`${cleanPart}(${georgianMorphologyAnalyzer.derivational[cleanPart].replace('DER ', '').toLowerCase()})`);\n        identified = true;\n      }\n      if (!identified) {\n        if (!rootFound) {\n          structure.push('ROOT');\n          analysis.push(`${cleanPart}(root)`);\n          rootFound = true;\n        } else {\n          structure.push('STEM');\n          analysis.push(`${cleanPart}(stem)`);\n        }\n      }\n    });\n    return {\n      structure: structure.join('-'),\n      analysis: analysis.join(' + '),\n      complexity: parts.length,\n      pattern: structure.join('-')\n    };\n  };\n  const calculateComplexityLevel = morphemeCount => {\n    if (morphemeCount <= 0) return 'No data';\n    switch (morphemeCount) {\n      case 1:\n        return 'Simple (Uninflected)';\n      case 2:\n        return 'Low (Inflected)';\n      case 3:\n      case 4:\n        return 'Moderate';\n      case 5:\n      case 6:\n        return 'High';\n      default:\n        return 'Very High (Agglutinative)';\n    }\n  };\n  const generateMorphologicalStats = results => {\n    const allMatches = results.flatMap(result => result.matches);\n    const stats = {\n      totalWords: allMatches.length,\n      byPOS: {},\n      patterns: {},\n      complexityDistribution: {},\n      averageComplexityByPOS: {}\n    };\n    allMatches.forEach(match => {\n      const pos = match.POS || 'Unknown';\n      const morphCount = countMorphemes(match.Morphemes);\n      const analysis = analyzeMorphemeStructure(match.Morphemes, pos);\n      if (!stats.byPOS[pos]) {\n        stats.byPOS[pos] = {\n          count: 0,\n          totalComplexity: 0,\n          morphemes: []\n        };\n      }\n      stats.byPOS[pos].count++;\n      stats.byPOS[pos].totalComplexity += morphCount;\n      stats.byPOS[pos].morphemes.push(morphCount);\n      if (analysis.pattern !== 'SIMPLE') {\n        stats.patterns[analysis.pattern] = (stats.patterns[analysis.pattern] || 0) + 1;\n      }\n      const complexityLevel = calculateComplexityLevel(morphCount);\n      stats.complexityDistribution[complexityLevel] = (stats.complexityDistribution[complexityLevel] || 0) + 1;\n    });\n    Object.keys(stats.byPOS).forEach(pos => {\n      stats.averageComplexityByPOS[pos] = (stats.byPOS[pos].totalComplexity / stats.byPOS[pos].count).toFixed(2);\n    });\n    return stats;\n  };\n  const createTranscriptionVariants = georgianWord => {\n    if (!georgianWord || typeof georgianWord !== 'string') return [];\n    let variants = new Set();\n    let basicLatin = '';\n    for (let char of georgianWord.toLowerCase()) {\n      basicLatin += georgianToLatin[char] || char;\n    }\n    variants.add(basicLatin);\n    variants.add(basicLatin.replace(/k/g, \"k'\").replace(/t/g, \"t'\").replace(/p/g, \"p'\").replace(/q/g, \"q'\"));\n    variants.add(basicLatin.replace(/c/g, 'ts')).add(basicLatin.replace(/c/g, \"ts'\"));\n    variants.add(basicLatin.replace(/ch/g, 'c')).add(basicLatin.replace(/ch/g, \"ch'\"));\n    return Array.from(variants).filter(v => v.length > 0);\n  };\n  const [userCSV, setUserCSV] = useState('');\n  const [csvData, setCsvData] = useState([]);\n  const [parseProgress, setParseProgress] = useState(0);\n  const [batchSize, setBatchSize] = useState(500);\n  const [currentBatch, setCurrentBatch] = useState(1);\n  const [processingBatch, setProcessingBatch] = useState(false);\n  const [matchedResults, setMatchedResults] = useState([]);\n  const [matchStats, setMatchStats] = useState({\n    total: 0,\n    matched: 0,\n    unmatched: 0,\n    byPOS: {}\n  });\n  const [morphologicalStats, setMorphologicalStats] = useState(null);\n  const [showUnmatched, setShowUnmatched] = useState(false);\n  const [showMorphAnalysis, setShowMorphAnalysis] = useState(true);\n  const resultsRef = useRef(null);\n  const detectDelimiter = data => {\n    const firstLine = data.split('\\n')[0];\n    const tabCount = (firstLine.match(/\\t/g) || []).length;\n    const commaCount = (firstLine.match(/,/g) || []).length;\n    return tabCount > commaCount ? '\\t' : ',';\n  };\n  const loadReferenceData = () => {\n    if (!referenceCSV.trim()) {\n      setError('Please paste your reference lemma data first.');\n      return;\n    }\n    try {\n      setLoading(true);\n      setError('');\n      const delimiter = detectDelimiter(referenceCSV);\n      const fileType = delimiter === '\\t' ? 'TSV' : 'CSV';\n      Papa.parse(referenceCSV, {\n        header: true,\n        skipEmptyLines: true,\n        dynamicTyping: true,\n        delimiter: delimiter,\n        complete: result => {\n          if (result.data.length > 0) {\n            const firstRow = result.data[0];\n            const headers = Object.keys(firstRow);\n            const hasNewFormat = headers.some(h => h.toLowerCase() === 'word') && headers.some(h => h.toLowerCase() === 'morphemes');\n            if (!hasNewFormat) {\n              setError(`${fileType} must have at least \"Word\" and \"Morphemes\" columns.`);\n              setLoading(false);\n              return;\n            }\n            setReferenceData(result.data);\n            const wordIndex = {};\n            result.data.forEach((row, rowIdx) => {\n              const wordKey = headers.find(h => h.toLowerCase() === 'word');\n              if (wordKey && row[wordKey]) {\n                const word = row[wordKey].toString().toLowerCase().trim();\n                if (word) {\n                  if (!wordIndex[word]) wordIndex[word] = [];\n                  wordIndex[word].push(rowIdx);\n                }\n              }\n            });\n            setIndexedData({\n              exact: wordIndex\n            });\n            setReferenceLoaded(true);\n            setLoading(false);\n            setError(`✓ ${fileType} data loaded successfully with ${result.data.length} entries`);\n            setTimeout(() => setError(''), 3000);\n          } else {\n            setError('Reference data appears to be empty.');\n            setLoading(false);\n          }\n        },\n        error: error => {\n          setError('Error parsing reference data: ' + error.message);\n          setLoading(false);\n        }\n      });\n    } catch (err) {\n      setError('Failed to process reference data: ' + err.message);\n      setLoading(false);\n    }\n  };\n  const parseUserCSV = () => {\n    if (!userCSV.trim()) return;\n    try {\n      Papa.parse(userCSV, {\n        header: true,\n        skipEmptyLines: true,\n        dynamicTyping: true,\n        complete: result => {\n          if (result.data.length > 0) {\n            const firstRow = result.data[0];\n            if (!('Word' in firstRow) && !('word' in firstRow)) {\n              setError('CSV must have a \"Word\" column.');\n              return;\n            }\n            const normalizedData = result.data.map(row => {\n              const normalizedRow = {};\n              Object.keys(row).forEach(key => {\n                const lowerKey = key.toLowerCase();\n                if (lowerKey === 'word') normalizedRow.Word = row[key];else if (lowerKey === 'freq' || lowerKey === 'frequency') normalizedRow.Freq = row[key];else normalizedRow[key] = row[key];\n              });\n              return normalizedRow;\n            });\n            setCsvData(normalizedData);\n            setCurrentBatch(1);\n            setMatchedResults([]);\n            setMatchStats({\n              total: normalizedData.length,\n              matched: 0,\n              unmatched: 0,\n              byPOS: {}\n            });\n            setParseProgress(0);\n          } else {\n            setError('CSV appears to be empty.');\n          }\n        },\n        error: error => {\n          setError('Error parsing your CSV: ' + error.message);\n        }\n      });\n    } catch (err) {\n      setError('Failed to process CSV: ' + err.message);\n    }\n  };\n  const findMatches = word => {\n    if (!word || typeof word !== 'string') return [];\n    const searchWord = word.toLowerCase().trim();\n    let matches = [];\n    if (indexedData.exact && indexedData.exact[searchWord]) {\n      matches = indexedData.exact[searchWord].map(idx => referenceData[idx]);\n    }\n    if (matches.length === 0 && /[\\u10A0-\\u10FF]/.test(searchWord)) {\n      const variants = createTranscriptionVariants(searchWord);\n      for (const variant of variants) {\n        if (indexedData.exact && indexedData.exact[variant]) {\n          const variantMatches = indexedData.exact[variant].map(idx => ({\n            ...referenceData[idx],\n            transcriptionVariant: variant\n          }));\n          matches.push(...variantMatches);\n        }\n      }\n    }\n    return matches.filter((match, index, self) => index === self.findIndex(m => m.Lemma === match.Lemma && m.Morphemes === match.Morphemes));\n  };\n  const processBatch = () => {\n    if (csvData.length === 0) return;\n    setProcessingBatch(true);\n    const startIdx = (currentBatch - 1) * batchSize;\n    const endIdx = Math.min(startIdx + batchSize, csvData.length);\n    const currentItems = csvData.slice(startIdx, endIdx);\n    setTimeout(() => {\n      const batchResults = [];\n      const newMatchStats = {\n        ...matchStats\n      };\n      currentItems.forEach((item, idx) => {\n        const word = item.Word || '';\n        const frequency = item.Freq || 0;\n        const matches = findMatches(word);\n        if (matches.length > 0) {\n          newMatchStats.matched += 1;\n          matches.forEach(match => {\n            const pos = match.POS || 'Unknown';\n            newMatchStats.byPOS[pos] = (newMatchStats.byPOS[pos] || 0) + 1;\n          });\n        } else {\n          newMatchStats.unmatched += 1;\n        }\n        batchResults.push({\n          word,\n          frequency,\n          matches,\n          originalIndex: startIdx + idx\n        });\n        setParseProgress(Math.round((startIdx + idx + 1) / csvData.length * 100));\n      });\n      setMatchedResults(prev => [...prev, ...batchResults]);\n      setMatchStats(newMatchStats);\n      const allResults = [...matchedResults, ...batchResults];\n      setMorphologicalStats(generateMorphologicalStats(allResults));\n      setProcessingBatch(false);\n      if (resultsRef.current) {\n        resultsRef.current.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    }, 100);\n  };\n  const processNextBatch = () => {\n    if (currentBatch * batchSize < csvData.length) {\n      setCurrentBatch(prev => prev + 1);\n    }\n  };\n  const resetResults = () => {\n    setCsvData([]);\n    setMatchedResults([]);\n    setParseProgress(0);\n    setCurrentBatch(1);\n    setMatchStats({\n      total: 0,\n      matched: 0,\n      unmatched: 0,\n      byPOS: {}\n    });\n    setMorphologicalStats(null);\n  };\n  const copyResultsToClipboard = () => {\n    if (matchedResults.length === 0) return;\n    const headers = showMorphAnalysis ? \"Word\\tFrequency\\tLemma\\tPOS\\tGloss\\tMorphemes\\tMorpheme_Count\\tMorphological_Structure\\tMorphological_Analysis\\tComplexity_Level\\n\" : \"Word\\tFrequency\\tLemma\\tPOS\\tGloss\\tMorphemes\\tMorpheme_Count\\n\";\n    const rows = matchedResults.flatMap(result => {\n      if (result.matches.length === 0) {\n        return showUnmatched ? showMorphAnalysis ? [`${result.word}\\t${result.frequency}\\t\\t\\t\\t\\t0\\t\\t\\t`] : [`${result.word}\\t${result.frequency}\\t\\t\\t\\t\\t0`] : [];\n      }\n      return result.matches.map(match => {\n        const morphCount = countMorphemes(match.Morphemes);\n        const morphAnalysis = analyzeMorphemeStructure(match.Morphemes, match.POS);\n        const complexityLevel = calculateComplexityLevel(morphCount);\n        return showMorphAnalysis ? `${result.word}\\t${result.frequency}\\t${match.Lemma || ''}\\t${match.POS || ''}\\t${match.Gloss || ''}\\t${match.Morphemes || ''}\\t${morphCount}\\t${morphAnalysis.structure}\\t${morphAnalysis.analysis}\\t${complexityLevel}` : `${result.word}\\t${result.frequency}\\t${match.Lemma || ''}\\t${match.POS || ''}\\t${match.Gloss || ''}\\t${match.Morphemes || ''}\\t${morphCount}`;\n      });\n    }).join('\\n');\n    navigator.clipboard.writeText(headers + rows).then(() => {\n      setError('Results copied to clipboard successfully!');\n      setTimeout(() => setError(''), 3000);\n    }).catch(() => {\n      setError('Failed to copy results.');\n      setTimeout(() => setError(''), 3000);\n    });\n  };\n  useEffect(() => {\n    if (csvData.length > 0 && !processingBatch) {\n      processBatch();\n    }\n  }, [currentBatch, csvData]);\n  const hasMoreBatches = csvData.length > 0 && currentBatch * batchSize < csvData.length;\n  const processedCount = Math.min(currentBatch * batchSize, csvData.length);\n  const chartData = Object.entries(matchStats.byPOS).map(([pos, count]) => ({\n    pos,\n    count,\n    percentage: matchStats.matched > 0 ? Math.round(count / matchStats.matched * 100) : 0\n  })).sort((a, b) => b.count - a.count);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 max-w-7xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Georgian Morphological Analyzer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `border px-4 py-3 rounded mb-4 ${error.includes('✓') ? 'bg-green-100 border-green-400 text-green-700' : 'bg-red-100 border-red-400 text-red-700'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 182\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"float-right font-bold\",\n        onClick: () => setError(''),\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 196\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 18\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center py-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mb-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 53\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Processing data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 155\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded shadow\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-3\",\n          children: \"Step 1: Load Reference Lexicon Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700 mb-1\",\n            children: \"Paste your TSV data (must include 'Word' and 'Morphemes' headers):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"w-full p-2 border rounded h-32 font-mono text-sm\",\n            value: referenceCSV,\n            onChange: e => setReferenceCSV(e.target.value),\n            placeholder: \"Word[TAB]Frequency[TAB]Lemma[TAB]POS[TAB]Gloss[TAB]Morphemes\\n\\u10D3\\u10D0\\u10D8\\u10E4\\u10D0\\u10E0\\u10D4\\t3\\t\\u10D0/ \\u10D8\\u10E4\\u10D0\\u10E0\\u10D4\\u10D1\\u10E1\\tVERB\\tcovers\\t\\u10D3\\u10D0-\\u10D8-\\u10E4\\u10D0\\u10E0-\\u10D4\",\n            disabled: referenceLoaded\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex gap-3 items-center\",\n          children: [!referenceLoaded ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\",\n            onClick: loadReferenceData,\n            disabled: !referenceCSV.trim() || loading,\n            children: \"Load Reference Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 36\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm\",\n            children: [\"\\u2713 Reference data loaded (\", referenceData.length, \" entries)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 219\n          }, this), referenceLoaded && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"text-blue-600 hover:text-blue-800 text-sm\",\n            onClick: () => {\n              setReferenceLoaded(false);\n              setReferenceData([]);\n              setIndexedData({});\n            },\n            children: \"Reset Reference Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 36\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `bg-white p-4 rounded shadow ${!referenceLoaded ? 'opacity-50' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-3\",\n          children: \"Step 2: Input Your Georgian Word List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700 mb-1\",\n            children: \"Paste your CSV data with Georgian words:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 35\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"w-full p-2 border rounded h-48 font-mono text-sm\",\n            value: userCSV,\n            onChange: e => setUserCSV(e.target.value),\n            placeholder: \"Freq,Word\\n1,\\u10DD\\u10E0\\u10D8\\n1,\\u10D3\\u10D0\\u10D8\\u10E4\\u10D0\\u10E0\\u10DD\\u10E1\\n1,\\u10D9\\u10D0\\u10E0\\u10D0\\u10E5\\u10D8\",\n            disabled: !referenceLoaded\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 147\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-wrap gap-3 items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\",\n            onClick: parseUserCSV,\n            disabled: !referenceLoaded || !userCSV.trim() || processingBatch,\n            children: \"Parse CSV\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"text-sm font-medium text-gray-700 mr-2\",\n              children: \"Batch Size:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 50\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"border rounded p-1\",\n              value: batchSize,\n              onChange: e => setBatchSize(Number(e.target.value)),\n              disabled: !referenceLoaded,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: 100,\n                children: \"100\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 360,\n                columnNumber: 267\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: 250,\n                children: \"250\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 360,\n                columnNumber: 299\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: 500,\n                children: \"500\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 360,\n                columnNumber: 331\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: 1000,\n                children: \"1000\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 360,\n                columnNumber: 363\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 127\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 15\n          }, this), csvData.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm text-gray-600\",\n            children: [processedCount, \" of \", csvData.length, \" words processed (\", Math.round(processedCount / csvData.length * 100), \"%)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 38\n          }, this), csvData.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"text-red-600 hover:text-red-800 text-sm\",\n            onClick: resetResults,\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 38\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 13\n        }, this), parseProgress > 0 && parseProgress < 100 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-full bg-gray-200 rounded-full h-2.5 mt-4\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-blue-600 h-2.5 rounded-full\",\n            style: {\n              width: `${parseProgress}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 119\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 59\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 11\n      }, this), matchedResults.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded shadow\",\n        ref: resultsRef,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-3\",\n          children: \"Step 3: Matching Results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gray-50 p-3 rounded\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"font-semibold mb-2\",\n              children: \"Summary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 57\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"space-y-1\",\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Total Words: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium\",\n                  children: matchStats.total\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 370,\n                  columnNumber: 147\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 130\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Words Processed: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium\",\n                  children: processedCount\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 370,\n                  columnNumber: 228\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 207\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Matched Words: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium text-green-600\",\n                  children: matchStats.matched\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 370,\n                  columnNumber: 305\n                }, this), \" (\", processedCount > 0 ? Math.round(matchStats.matched / processedCount * 100) : 0, \"%)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 286\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Unmatched Words: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium text-red-600\",\n                  children: matchStats.unmatched\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 370,\n                  columnNumber: 489\n                }, this), \" (\", processedCount > 0 ? Math.round(matchStats.unmatched / processedCount * 100) : 0, \"%)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 468\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 104\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 17\n          }, this), chartData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gray-50 p-3 rounded h-64\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"font-semibold mb-2\",\n              children: \"POS Distribution\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 88\n            }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n              width: \"100%\",\n              height: \"90%\",\n              children: /*#__PURE__*/_jsxDEV(BarChart, {\n                data: chartData.slice(0, 10),\n                margin: {\n                  top: 5,\n                  right: 20,\n                  left: 10,\n                  bottom: 5\n                },\n                children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                  strokeDasharray: \"3 3\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 371,\n                  columnNumber: 283\n                }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                  dataKey: \"pos\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 371,\n                  columnNumber: 322\n                }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 371,\n                  columnNumber: 345\n                }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                  formatter: (value, name, props) => [`${value} (${props.payload.percentage}%)`, 'Count']\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 371,\n                  columnNumber: 354\n                }, this), /*#__PURE__*/_jsxDEV(Bar, {\n                  dataKey: \"count\",\n                  fill: \"#3b82f6\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 371,\n                  columnNumber: 454\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 191\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 144\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 43\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-wrap gap-3 mb-4\",\n          children: [hasMoreBatches && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded\",\n            onClick: processNextBatch,\n            disabled: processingBatch,\n            children: processingBatch ? 'Processing...' : `Process Next Batch (${Math.min(batchSize, csvData.length - processedCount)} words)`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\",\n            onClick: copyResultsToClipboard,\n            disabled: matchedResults.length === 0,\n            children: \"Copy Results to Clipboard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: \"showMorphAnalysis\",\n              checked: showMorphAnalysis,\n              onChange: e => setShowMorphAnalysis(e.target.checked),\n              className: \"mr-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 52\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"showMorphAnalysis\",\n              className: \"text-sm\",\n              children: \"Show morphological analysis\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 202\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center ml-auto\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: \"showUnmatched\",\n              checked: showUnmatched,\n              onChange: e => setShowUnmatched(e.target.checked),\n              className: \"mr-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 60\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"showUnmatched\",\n              className: \"text-sm\",\n              children: \"Show unmatched words\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 198\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 15\n        }, this), morphologicalStats && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-6 bg-gray-50 p-4 rounded\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"font-semibold mb-3\",\n            children: \"Morphological Analysis Summary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 62\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"font-medium mb-2\",\n                children: \"Complexity Distribution\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 207\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"space-y-1 text-sm\",\n                children: Object.entries(morphologicalStats.complexityDistribution).map(([level, count]) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex justify-between\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [level, \":\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 380,\n                    columnNumber: 437\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"font-medium\",\n                    children: count\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 380,\n                    columnNumber: 458\n                  }, this)]\n                }, level, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 380,\n                  columnNumber: 387\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 268\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 202\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"font-medium mb-2\",\n                children: \"Avg Complexity by POS\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 528\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"space-y-1 text-sm\",\n                children: Object.entries(morphologicalStats.averageComplexityByPOS).sort(([, a], [, b]) => b - a).map(([pos, avg]) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex justify-between\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [pos, \":\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 380,\n                    columnNumber: 780\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"font-medium\",\n                    children: avg\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 380,\n                    columnNumber: 799\n                  }, this)]\n                }, pos, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 380,\n                  columnNumber: 732\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 587\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 523\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"font-medium mb-2\",\n                children: \"Common Patterns\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 867\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"space-y-1 text-sm\",\n                children: Object.entries(morphologicalStats.patterns).sort(([, a], [, b]) => b - a).slice(0, 5).map(([pattern, count]) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex justify-between\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"font-mono text-xs\",\n                    children: [pattern, \":\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 380,\n                    columnNumber: 1121\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"font-medium\",\n                    children: count\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 380,\n                    columnNumber: 1174\n                  }, this)]\n                }, pattern, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 380,\n                  columnNumber: 1069\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 920\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 862\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 132\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overflow-x-auto\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"min-w-full border-collapse border border-gray-300\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                className: \"bg-gray-100\",\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"Word\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 152\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"Freq\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 220\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"Lemma\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 288\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"POS\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 357\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"Gloss\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 424\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"Morphemes\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 493\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"#\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 566\n                }, this), showMorphAnalysis && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"border border-gray-300 px-4 py-2 text-left\",\n                    children: \"Structure\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 382,\n                    columnNumber: 656\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"border border-gray-300 px-4 py-2 text-left\",\n                    children: \"Analysis\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 382,\n                    columnNumber: 729\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"border border-gray-300 px-4 py-2 text-left\",\n                    children: \"Complexity\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 382,\n                    columnNumber: 801\n                  }, this)]\n                }, void 0, true)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 382,\n                columnNumber: 124\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 117\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: matchedResults.map(result => {\n                if (result.matches.length === 0) {\n                  if (!showUnmatched) return null;\n                  return /*#__PURE__*/_jsxDEV(\"tr\", {\n                    className: \"bg-red-50\",\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2\",\n                      children: result.word\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 386,\n                      columnNumber: 97\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2\",\n                      children: result.frequency\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 386,\n                      columnNumber: 164\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2 text-red-500\",\n                      colSpan: showMorphAnalysis ? 8 : 5,\n                      children: \"Not found\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 386,\n                      columnNumber: 236\n                    }, this)]\n                  }, `unmatched-${result.originalIndex}`, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 386,\n                    columnNumber: 29\n                  }, this);\n                }\n                return result.matches.map((match, matchIdx) => {\n                  const morphCount = countMorphemes(match.Morphemes);\n                  const morphAnalysis = analyzeMorphemeStructure(match.Morphemes, match.POS);\n                  const complexityLevel = calculateComplexityLevel(morphCount);\n                  return /*#__PURE__*/_jsxDEV(\"tr\", {\n                    className: matchIdx > 0 ? \"bg-blue-50\" : \"\",\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2\",\n                      children: matchIdx === 0 ? result.word : \"\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 394,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2\",\n                      children: matchIdx === 0 ? result.frequency : \"\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 395,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2\",\n                      children: match.Lemma\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 396,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2\",\n                      children: match.POS\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 396,\n                      columnNumber: 92\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2 text-sm\",\n                      children: match.Gloss\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 397,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2 font-mono text-sm\",\n                      children: match.Morphemes\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 398,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2 text-center font-medium\",\n                      children: morphCount\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 399,\n                      columnNumber: 25\n                    }, this), showMorphAnalysis && /*#__PURE__*/_jsxDEV(_Fragment, {\n                      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                        className: \"border border-gray-300 px-4 py-2 font-mono text-xs\",\n                        children: morphAnalysis.structure\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 401,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        className: \"border border-gray-300 px-4 py-2 text-xs\",\n                        children: morphAnalysis.analysis\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 402,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        className: \"border border-gray-300 px-4 py-2 text-center text-sm\",\n                        children: /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: `px-2 py-1 rounded text-xs ${complexityLevel.startsWith('Very High') ? 'bg-red-100 text-red-800' : complexityLevel.startsWith('High') ? 'bg-orange-100 text-orange-800' : complexityLevel.startsWith('Moderate') ? 'bg-yellow-100 text-yellow-800' : complexityLevel.startsWith('Low') ? 'bg-green-100 text-green-800' : complexityLevel.startsWith('Simple') ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'}`,\n                          children: complexityLevel\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 404,\n                          columnNumber: 29\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 403,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true)]\n                  }, `match-${result.originalIndex}-${matchIdx}`, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 393,\n                    columnNumber: 23\n                  }, this);\n                });\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 893\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 48\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 15\n        }, this), hasMoreBatches && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4 text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded\",\n            onClick: processNextBatch,\n            disabled: processingBatch,\n            children: processingBatch ? 'Processing...' : `Process Next Batch (${Math.min(batchSize, csvData.length - processedCount)} words)`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 69\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-blue-50 p-4 rounded\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"font-semibold mb-2\",\n          children: \"Instructions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 51\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          className: \"list-decimal pl-5 space-y-1\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Step 1:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 151\n            }, this), \" Paste your lemmatized reference lexicon (TSV format, with headers 'Word', 'Morphemes', etc.) and click \\\"Load Reference Data\\\"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 147\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Step 2:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 309\n            }, this), \" Paste your Georgian word list CSV and click \\\"Parse CSV\\\"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 305\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Step 3:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 398\n            }, this), \" Process words in batches and review matches and the refined morphological analysis.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 394\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 103\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 335,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"PAJ+MFfT8vDhcMs2XtfbnDr1gnU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Papa","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","referenceData","setReferenceData","indexedData","setIndexedData","loading","setLoading","error","setError","referenceLoaded","setReferenceLoaded","referenceCSV","setReferenceCSV","georgianToLatin","countMorphemes","morphemes","trim","split","filter","part","length","georgianMorphologyAnalyzer","preverbs","personMarkers","versionVowels","tenseAspectMood","nounAffixes","particles","derivational","analyzeMorphemeStructure","pos","structure","analysis","complexity","pattern","parts","rootFound","forEach","index","cleanPart","identified","includes","push","role","toLowerCase","replace","startsWith","join","calculateComplexityLevel","morphemeCount","generateMorphologicalStats","results","allMatches","flatMap","result","matches","stats","totalWords","byPOS","patterns","complexityDistribution","averageComplexityByPOS","match","POS","morphCount","Morphemes","count","totalComplexity","complexityLevel","Object","keys","toFixed","createTranscriptionVariants","georgianWord","variants","Set","basicLatin","char","add","Array","from","v","userCSV","setUserCSV","csvData","setCsvData","parseProgress","setParseProgress","batchSize","setBatchSize","currentBatch","setCurrentBatch","processingBatch","setProcessingBatch","matchedResults","setMatchedResults","matchStats","setMatchStats","total","matched","unmatched","morphologicalStats","setMorphologicalStats","showUnmatched","setShowUnmatched","showMorphAnalysis","setShowMorphAnalysis","resultsRef","detectDelimiter","data","firstLine","tabCount","commaCount","loadReferenceData","delimiter","fileType","parse","header","skipEmptyLines","dynamicTyping","complete","firstRow","headers","hasNewFormat","some","h","wordIndex","row","rowIdx","wordKey","find","word","toString","exact","setTimeout","message","err","parseUserCSV","normalizedData","map","normalizedRow","key","lowerKey","Word","Freq","findMatches","searchWord","idx","test","variant","variantMatches","transcriptionVariant","self","findIndex","m","Lemma","processBatch","startIdx","endIdx","Math","min","currentItems","slice","batchResults","newMatchStats","item","frequency","originalIndex","round","prev","allResults","current","scrollIntoView","behavior","processNextBatch","resetResults","copyResultsToClipboard","rows","morphAnalysis","Gloss","navigator","clipboard","writeText","then","catch","hasMoreBatches","processedCount","chartData","entries","percentage","sort","a","b","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","onChange","e","target","placeholder","disabled","Number","style","width","ref","height","margin","top","right","left","bottom","strokeDasharray","dataKey","formatter","name","props","payload","fill","type","id","checked","htmlFor","level","avg","colSpan","matchIdx","_c","$RefreshReg$"],"sources":["/Users/tamarkalkhitashvili/Documents/chi_analyser/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Papa from 'papaparse';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\nfunction App() {\n  // Reference data state\n  const [referenceData, setReferenceData] = useState([]);\n  const [indexedData, setIndexedData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [referenceLoaded, setReferenceLoaded] = useState(false);\n  const [referenceCSV, setReferenceCSV] = useState('');\n\n  // Georgian to Latin transcription mapping\n  const georgianToLatin = {\n    'ა': 'a', 'ბ': 'b', 'გ': 'g', 'დ': 'd', 'ე': 'e', 'ვ': 'v', 'ზ': 'z', 'თ': 't',\n    'ი': 'i', 'კ': 'k', 'ლ': 'l', 'მ': 'm', 'ნ': 'n', 'ო': 'o', 'პ': 'p', 'ჟ': 'zh',\n    'რ': 'r', 'ს': 's', 'ტ': 't', 'უ': 'u', 'ფ': 'f', 'ქ': 'k', 'ღ': 'gh', 'ყ': 'q',\n    'შ': 'sh', 'ჩ': 'ch', 'ც': 'c', 'ძ': 'dz', 'წ': 'c', 'ჭ': 'ch', 'ხ': 'x', 'ჯ': 'j', 'ჰ': 'h'\n  };\n\n  // Helper function to count morphemes\n  const countMorphemes = (morphemes) => {\n    if (!morphemes || typeof morphemes !== 'string' || morphemes.trim() === '') return 0;\n    return morphemes.split('-').filter(part => part.trim().length > 0).length;\n  };\n\n  // REFINED Georgian morphological analyzer\n  const georgianMorphologyAnalyzer = {\n    preverbs: ['გა', 'მო', 'და', 'ა', 'შე', 'წა', 'მი', 'გადა', 'გამო', 'შემო', 'ჩა', 'ამო', 'წამო', 'გან'],\n    personMarkers: {\n      'ვ': '1SUBJ', 'მ': '1OBJ', 'გ': '2OBJ', 'ჰ': '3OBJ', 'ს': '3OBJ/3SUBJ', 'ხ': '2SUBJ', 'გვ': '1plOBJ',\n      'თ': '2plSUBJ/PL', 'ან': '3plSUBJ', 'ენ': '3plSUBJ', 'ეს': '3plSUBJ', 'ნენ': '3plSUBJ'\n    },\n    versionVowels: {\n      'ა': 'VER.VOW', 'ი': 'VER.VOW', 'უ': 'VER.VOW', 'ე': 'VER.VOW'\n    },\n    tenseAspectMood: {\n      'ებ': 'TAM (Present/Future Stem)', 'ობ': 'TAM (Present/Future Stem)', 'ავ': 'TAM (Present/Future Stem)', 'ამ': 'TAM (Present/Future Stem)', 'ი': 'TAM (Aorist/Perfect)',\n      'ა': 'TAM (Aorist/Perfect)', 'ე': 'TAM (Aorist/Imperative)', 'ო': 'TAM (Optative)', 'ს': 'TAM (3sg Present)',\n      'დ': 'TAM (Imperfect/Passive)', 'ილ': 'TAM (Perfect Participle)', 'ულ': 'TAM (Past Participle)'\n    },\n    nounAffixes: {\n      'ი': 'CASE (Nominative)', 'მა': 'CASE (Ergative)', 'მ': 'CASE (Ergative)', 'ს': 'CASE (Genitive/Dative)', 'ით': 'CASE (Instrumental)',\n      'ად': 'CASE (Adverbial)', 'ო': 'CASE (Vocative)', 'ში': 'CASE (Inessive)', 'ზე': 'CASE (Superessive)', 'დან': 'CASE (Ablative)',\n      'მდე': 'CASE (Terminative)', 'თან': 'CASE (Comitative)', 'კენ': 'CASE (Adessive)', 'გან': 'CASE (Originative)',\n      'ებ': 'PL', 'ნი': 'PL'\n    },\n    particles: {\n      'ც': 'PART (also/too)', 'ო': 'PART (Quotative)', 'მეთქი': 'PART (I said)', 'ვე': 'PART (indeed)', 'ღა': 'PART (else)'\n    },\n    derivational: {\n      'ელ': 'DER (Origin)', 'ურ': 'DER (Adjective)', 'იკო': 'DER (Diminutive)', 'უნა': 'DER (Diminutive)',\n      'ულ': 'DER (Adjective)', 'იან': 'DER (Possessive Adj)', 'ობ': 'DER (Abstract Noun)', 'სა': 'DER (Purpose)'\n    }\n  };\n\n  // REFINED function to analyze morpheme structure\n  const analyzeMorphemeStructure = (morphemes, pos) => {\n    if (!morphemes || typeof morphemes !== 'string' || morphemes.trim() === '') {\n      return { structure: 'No morphemes', analysis: 'No morphological data available', complexity: 0, pattern: 'SIMPLE' };\n    }\n\n    const parts = morphemes.split('-').filter(part => part.trim().length > 0);\n    const structure = [];\n    const analysis = [];\n    let rootFound = false;\n\n    parts.forEach((part, index) => {\n      const cleanPart = part.trim();\n      let identified = false;\n\n      if (georgianMorphologyAnalyzer.preverbs.includes(cleanPart) && index < 2) {\n        structure.push('PREV');\n        analysis.push(`${cleanPart}(preverb)`);\n        identified = true;\n      }\n\n      if (!identified && georgianMorphologyAnalyzer.personMarkers[cleanPart]) {\n        const role = georgianMorphologyAnalyzer.personMarkers[cleanPart];\n        structure.push(`PERS.${role.includes('SUBJ') ? 'S' : 'O'}`);\n        analysis.push(`${cleanPart}(${role.toLowerCase()})`);\n        identified = true;\n      }\n\n      if (!identified && pos === 'VERB' && georgianMorphologyAnalyzer.versionVowels[cleanPart] && index < (parts.length -1) ) {\n        structure.push('VER.VOW');\n        analysis.push(`${cleanPart}(version vowel)`);\n        identified = true;\n      }\n\n      // **CRITICAL FIX HERE**: Added pos === 'VERB' check\n      if (!identified && pos === 'VERB' && georgianMorphologyAnalyzer.tenseAspectMood[cleanPart]) {\n          const role = georgianMorphologyAnalyzer.tenseAspectMood[cleanPart];\n          if(cleanPart === 'დ') {\n            structure.push('PASS');\n            analysis.push(`${cleanPart}(passive/medial)`);\n          } else {\n            structure.push('TAM');\n            analysis.push(`${cleanPart}(${role.replace('TAM ', '')})`);\n          }\n          identified = true;\n      }\n\n      if (!identified && (pos === 'NOUN' || pos === 'PROPN' || pos === 'PRON' || pos === 'ADJ' || pos === 'PTCPL') && georgianMorphologyAnalyzer.nounAffixes[cleanPart]) {\n          const role = georgianMorphologyAnalyzer.nounAffixes[cleanPart];\n          structure.push(role.startsWith('CASE') ? 'CASE' : role);\n          analysis.push(`${cleanPart}(${role.replace('CASE ', '').toLowerCase()})`);\n          identified = true;\n      }\n\n      if (!identified && georgianMorphologyAnalyzer.particles[cleanPart]) {\n        structure.push('PART');\n        analysis.push(`${cleanPart}(${georgianMorphologyAnalyzer.particles[cleanPart].replace('PART ', '').toLowerCase()})`);\n        identified = true;\n      }\n\n      if (!identified && georgianMorphologyAnalyzer.derivational[cleanPart]) {\n        structure.push('DER');\n        analysis.push(`${cleanPart}(${georgianMorphologyAnalyzer.derivational[cleanPart].replace('DER ', '').toLowerCase()})`);\n        identified = true;\n      }\n\n      if (!identified) {\n        if (!rootFound) {\n          structure.push('ROOT');\n          analysis.push(`${cleanPart}(root)`);\n          rootFound = true;\n        } else {\n          structure.push('STEM');\n          analysis.push(`${cleanPart}(stem)`);\n        }\n      }\n    });\n\n    return {\n      structure: structure.join('-'),\n      analysis: analysis.join(' + '),\n      complexity: parts.length,\n      pattern: structure.join('-')\n    };\n  };\n\n  const calculateComplexityLevel = (morphemeCount) => {\n    if (morphemeCount <= 0) return 'No data';\n    switch (morphemeCount) {\n      case 1: return 'Simple (Uninflected)';\n      case 2: return 'Low (Inflected)';\n      case 3:\n      case 4: return 'Moderate';\n      case 5:\n      case 6: return 'High';\n      default: return 'Very High (Agglutinative)';\n    }\n  };\n\n  const generateMorphologicalStats = (results) => {\n    const allMatches = results.flatMap(result => result.matches);\n    const stats = { totalWords: allMatches.length, byPOS: {}, patterns: {}, complexityDistribution: {}, averageComplexityByPOS: {} };\n    allMatches.forEach(match => {\n      const pos = match.POS || 'Unknown';\n      const morphCount = countMorphemes(match.Morphemes);\n      const analysis = analyzeMorphemeStructure(match.Morphemes, pos);\n      if (!stats.byPOS[pos]) { stats.byPOS[pos] = { count: 0, totalComplexity: 0, morphemes: [] }; }\n      stats.byPOS[pos].count++;\n      stats.byPOS[pos].totalComplexity += morphCount;\n      stats.byPOS[pos].morphemes.push(morphCount);\n      if (analysis.pattern !== 'SIMPLE') { stats.patterns[analysis.pattern] = (stats.patterns[analysis.pattern] || 0) + 1; }\n      const complexityLevel = calculateComplexityLevel(morphCount);\n      stats.complexityDistribution[complexityLevel] = (stats.complexityDistribution[complexityLevel] || 0) + 1;\n    });\n    Object.keys(stats.byPOS).forEach(pos => { stats.averageComplexityByPOS[pos] = (stats.byPOS[pos].totalComplexity / stats.byPOS[pos].count).toFixed(2); });\n    return stats;\n  };\n\n  const createTranscriptionVariants = (georgianWord) => {\n    if (!georgianWord || typeof georgianWord !== 'string') return [];\n    let variants = new Set();\n    let basicLatin = '';\n    for (let char of georgianWord.toLowerCase()) { basicLatin += georgianToLatin[char] || char; }\n    variants.add(basicLatin);\n    variants.add(basicLatin.replace(/k/g, \"k'\").replace(/t/g, \"t'\").replace(/p/g, \"p'\").replace(/q/g, \"q'\"));\n    variants.add(basicLatin.replace(/c/g, 'ts')).add(basicLatin.replace(/c/g, \"ts'\"));\n    variants.add(basicLatin.replace(/ch/g, 'c')).add(basicLatin.replace(/ch/g, \"ch'\"));\n    return Array.from(variants).filter(v => v.length > 0);\n  };\n\n  const [userCSV, setUserCSV] = useState('');\n  const [csvData, setCsvData] = useState([]);\n  const [parseProgress, setParseProgress] = useState(0);\n  const [batchSize, setBatchSize] = useState(500);\n  const [currentBatch, setCurrentBatch] = useState(1);\n  const [processingBatch, setProcessingBatch] = useState(false);\n  const [matchedResults, setMatchedResults] = useState([]);\n  const [matchStats, setMatchStats] = useState({ total: 0, matched: 0, unmatched: 0, byPOS: {} });\n  const [morphologicalStats, setMorphologicalStats] = useState(null);\n  const [showUnmatched, setShowUnmatched] = useState(false);\n  const [showMorphAnalysis, setShowMorphAnalysis] = useState(true);\n  const resultsRef = useRef(null);\n\n  const detectDelimiter = (data) => {\n    const firstLine = data.split('\\n')[0];\n    const tabCount = (firstLine.match(/\\t/g) || []).length;\n    const commaCount = (firstLine.match(/,/g) || []).length;\n    return tabCount > commaCount ? '\\t' : ',';\n  };\n\n  const loadReferenceData = () => {\n    if (!referenceCSV.trim()) { setError('Please paste your reference lemma data first.'); return; }\n    try {\n      setLoading(true); setError('');\n      const delimiter = detectDelimiter(referenceCSV);\n      const fileType = delimiter === '\\t' ? 'TSV' : 'CSV';\n      Papa.parse(referenceCSV, {\n        header: true, skipEmptyLines: true, dynamicTyping: true, delimiter: delimiter,\n        complete: (result) => {\n          if (result.data.length > 0) {\n            const firstRow = result.data[0]; const headers = Object.keys(firstRow);\n            const hasNewFormat = headers.some(h => h.toLowerCase() === 'word') && headers.some(h => h.toLowerCase() === 'morphemes');\n            if (!hasNewFormat) { setError(`${fileType} must have at least \"Word\" and \"Morphemes\" columns.`); setLoading(false); return; }\n            setReferenceData(result.data);\n            const wordIndex = {};\n            result.data.forEach((row, rowIdx) => {\n              const wordKey = headers.find(h => h.toLowerCase() === 'word');\n              if (wordKey && row[wordKey]) {\n                const word = row[wordKey].toString().toLowerCase().trim();\n                if (word) { if (!wordIndex[word]) wordIndex[word] = []; wordIndex[word].push(rowIdx); }\n              }\n            });\n            setIndexedData({ exact: wordIndex }); setReferenceLoaded(true); setLoading(false);\n            setError(`✓ ${fileType} data loaded successfully with ${result.data.length} entries`); setTimeout(() => setError(''), 3000);\n          } else { setError('Reference data appears to be empty.'); setLoading(false); }\n        },\n        error: (error) => { setError('Error parsing reference data: ' + error.message); setLoading(false); }\n      });\n    } catch (err) { setError('Failed to process reference data: ' + err.message); setLoading(false); }\n  };\n\n  const parseUserCSV = () => {\n    if (!userCSV.trim()) return;\n    try {\n      Papa.parse(userCSV, {\n        header: true, skipEmptyLines: true, dynamicTyping: true,\n        complete: (result) => {\n          if (result.data.length > 0) {\n            const firstRow = result.data[0];\n            if (!('Word' in firstRow) && !('word' in firstRow)) { setError('CSV must have a \"Word\" column.'); return; }\n            const normalizedData = result.data.map(row => {\n              const normalizedRow = {};\n              Object.keys(row).forEach(key => {\n                const lowerKey = key.toLowerCase();\n                if (lowerKey === 'word') normalizedRow.Word = row[key];\n                else if (lowerKey === 'freq' || lowerKey === 'frequency') normalizedRow.Freq = row[key];\n                else normalizedRow[key] = row[key];\n              });\n              return normalizedRow;\n            });\n            setCsvData(normalizedData); setCurrentBatch(1); setMatchedResults([]); setMatchStats({ total: normalizedData.length, matched: 0, unmatched: 0, byPOS: {} }); setParseProgress(0);\n          } else { setError('CSV appears to be empty.'); }\n        },\n        error: (error) => { setError('Error parsing your CSV: ' + error.message); }\n      });\n    } catch (err) { setError('Failed to process CSV: ' + err.message); }\n  };\n\n  const findMatches = (word) => {\n    if (!word || typeof word !== 'string') return [];\n    const searchWord = word.toLowerCase().trim();\n    let matches = [];\n    if (indexedData.exact && indexedData.exact[searchWord]) { matches = indexedData.exact[searchWord].map(idx => referenceData[idx]); }\n    if (matches.length === 0 && /[\\u10A0-\\u10FF]/.test(searchWord)) {\n      const variants = createTranscriptionVariants(searchWord);\n      for (const variant of variants) { if (indexedData.exact && indexedData.exact[variant]) { const variantMatches = indexedData.exact[variant].map(idx => ({ ...referenceData[idx], transcriptionVariant: variant })); matches.push(...variantMatches); } }\n    }\n    return matches.filter((match, index, self) => index === self.findIndex(m => m.Lemma === match.Lemma && m.Morphemes === match.Morphemes));\n  };\n\n  const processBatch = () => {\n    if (csvData.length === 0) return;\n    setProcessingBatch(true);\n    const startIdx = (currentBatch - 1) * batchSize;\n    const endIdx = Math.min(startIdx + batchSize, csvData.length);\n    const currentItems = csvData.slice(startIdx, endIdx);\n    setTimeout(() => {\n      const batchResults = [];\n      const newMatchStats = { ...matchStats };\n      currentItems.forEach((item, idx) => {\n        const word = item.Word || '';\n        const frequency = item.Freq || 0;\n        const matches = findMatches(word);\n        if (matches.length > 0) {\n          newMatchStats.matched += 1;\n          matches.forEach(match => { const pos = match.POS || 'Unknown'; newMatchStats.byPOS[pos] = (newMatchStats.byPOS[pos] || 0) + 1; });\n        } else { newMatchStats.unmatched += 1; }\n        batchResults.push({ word, frequency, matches, originalIndex: startIdx + idx });\n        setParseProgress(Math.round(((startIdx + idx + 1) / csvData.length) * 100));\n      });\n      setMatchedResults(prev => [...prev, ...batchResults]);\n      setMatchStats(newMatchStats);\n      const allResults = [...matchedResults, ...batchResults];\n      setMorphologicalStats(generateMorphologicalStats(allResults));\n      setProcessingBatch(false);\n      if (resultsRef.current) { resultsRef.current.scrollIntoView({ behavior: 'smooth' }); }\n    }, 100);\n  };\n\n  const processNextBatch = () => { if (currentBatch * batchSize < csvData.length) { setCurrentBatch(prev => prev + 1); } };\n\n  const resetResults = () => { setCsvData([]); setMatchedResults([]); setParseProgress(0); setCurrentBatch(1); setMatchStats({ total: 0, matched: 0, unmatched: 0, byPOS: {} }); setMorphologicalStats(null); };\n\n  const copyResultsToClipboard = () => {\n    if (matchedResults.length === 0) return;\n    const headers = showMorphAnalysis ? \"Word\\tFrequency\\tLemma\\tPOS\\tGloss\\tMorphemes\\tMorpheme_Count\\tMorphological_Structure\\tMorphological_Analysis\\tComplexity_Level\\n\" : \"Word\\tFrequency\\tLemma\\tPOS\\tGloss\\tMorphemes\\tMorpheme_Count\\n\";\n    const rows = matchedResults.flatMap(result => {\n      if (result.matches.length === 0) { return showUnmatched ? (showMorphAnalysis ? [`${result.word}\\t${result.frequency}\\t\\t\\t\\t\\t0\\t\\t\\t`] : [`${result.word}\\t${result.frequency}\\t\\t\\t\\t\\t0`]) : []; }\n      return result.matches.map(match => {\n        const morphCount = countMorphemes(match.Morphemes);\n        const morphAnalysis = analyzeMorphemeStructure(match.Morphemes, match.POS);\n        const complexityLevel = calculateComplexityLevel(morphCount);\n        return showMorphAnalysis ?\n          `${result.word}\\t${result.frequency}\\t${match.Lemma || ''}\\t${match.POS || ''}\\t${match.Gloss || ''}\\t${match.Morphemes || ''}\\t${morphCount}\\t${morphAnalysis.structure}\\t${morphAnalysis.analysis}\\t${complexityLevel}` :\n          `${result.word}\\t${result.frequency}\\t${match.Lemma || ''}\\t${match.POS || ''}\\t${match.Gloss || ''}\\t${match.Morphemes || ''}\\t${morphCount}`;\n      });\n    }).join('\\n');\n    navigator.clipboard.writeText(headers + rows).then(() => { setError('Results copied to clipboard successfully!'); setTimeout(() => setError(''), 3000); }).catch(() => { setError('Failed to copy results.'); setTimeout(() => setError(''), 3000); });\n  };\n\n  useEffect(() => { if (csvData.length > 0 && !processingBatch) { processBatch(); } }, [currentBatch, csvData]);\n\n  const hasMoreBatches = csvData.length > 0 && currentBatch * batchSize < csvData.length;\n  const processedCount = Math.min(currentBatch * batchSize, csvData.length);\n  const chartData = Object.entries(matchStats.byPOS).map(([pos, count]) => ({ pos, count, percentage: matchStats.matched > 0 ? Math.round((count / matchStats.matched) * 100) : 0 })).sort((a, b) => b.count - a.count);\n\n  return (\n    <div className=\"p-4 max-w-7xl mx-auto\">\n      <h1 className=\"text-2xl font-bold mb-4\">Georgian Morphological Analyzer</h1>\n      {error && (<div className={`border px-4 py-3 rounded mb-4 ${error.includes('✓') ? 'bg-green-100 border-green-400 text-green-700' : 'bg-red-100 border-red-400 text-red-700'}`}><p>{error}</p><button className=\"float-right font-bold\" onClick={() => setError('')}>×</button></div>)}\n      {loading ? (<div className=\"text-center py-8\"><div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mb-2\"></div><p>Processing data...</p></div>) : (\n        <div className=\"space-y-6\">\n          <div className=\"bg-white p-4 rounded shadow\">\n            <h2 className=\"text-xl font-semibold mb-3\">Step 1: Load Reference Lexicon Data</h2>\n            <div className=\"mb-3\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Paste your TSV data (must include 'Word' and 'Morphemes' headers):</label>\n              <textarea className=\"w-full p-2 border rounded h-32 font-mono text-sm\" value={referenceCSV} onChange={(e) => setReferenceCSV(e.target.value)} placeholder=\"Word[TAB]Frequency[TAB]Lemma[TAB]POS[TAB]Gloss[TAB]Morphemes\nდაიფარე\t3\tა/ იფარებს\tVERB\tcovers\tდა-ი-ფარ-ე\" disabled={referenceLoaded} />\n            </div>\n            <div className=\"flex gap-3 items-center\">\n              {!referenceLoaded ? (<button className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\" onClick={loadReferenceData} disabled={!referenceCSV.trim() || loading}>Load Reference Data</button>) : (<div className=\"bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm\">✓ Reference data loaded ({referenceData.length} entries)</div>)}\n              {referenceLoaded && (<button className=\"text-blue-600 hover:text-blue-800 text-sm\" onClick={() => { setReferenceLoaded(false); setReferenceData([]); setIndexedData({}); }}>Reset Reference Data</button>)}\n            </div>\n          </div>\n          <div className={`bg-white p-4 rounded shadow ${!referenceLoaded ? 'opacity-50' : ''}`}>\n            <h2 className=\"text-xl font-semibold mb-3\">Step 2: Input Your Georgian Word List</h2>\n            <div className=\"mb-3\"><label className=\"block text-sm font-medium text-gray-700 mb-1\">Paste your CSV data with Georgian words:</label><textarea className=\"w-full p-2 border rounded h-48 font-mono text-sm\" value={userCSV} onChange={(e) => setUserCSV(e.target.value)} placeholder=\"Freq,Word\n1,ორი\n1,დაიფაროს\n1,კარაქი\" disabled={!referenceLoaded} /></div>\n            <div className=\"flex flex-wrap gap-3 items-center\">\n              <button className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\" onClick={parseUserCSV} disabled={!referenceLoaded || !userCSV.trim() || processingBatch}>Parse CSV</button>\n              <div className=\"flex items-center\"><label className=\"text-sm font-medium text-gray-700 mr-2\">Batch Size:</label><select className=\"border rounded p-1\" value={batchSize} onChange={(e) => setBatchSize(Number(e.target.value))} disabled={!referenceLoaded}><option value={100}>100</option><option value={250}>250</option><option value={500}>500</option><option value={1000}>1000</option></select></div>\n              {csvData.length > 0 && <span className=\"text-sm text-gray-600\">{processedCount} of {csvData.length} words processed ({Math.round((processedCount / csvData.length) * 100)}%)</span>}\n              {csvData.length > 0 && <button className=\"text-red-600 hover:text-red-800 text-sm\" onClick={resetResults}>Reset</button>}\n            </div>\n            {parseProgress > 0 && parseProgress < 100 && (<div className=\"w-full bg-gray-200 rounded-full h-2.5 mt-4\"><div className=\"bg-blue-600 h-2.5 rounded-full\" style={{ width: `${parseProgress}%` }}></div></div>)}\n          </div>\n          {matchedResults.length > 0 && (\n            <div className=\"bg-white p-4 rounded shadow\" ref={resultsRef}>\n              <h2 className=\"text-xl font-semibold mb-3\">Step 3: Matching Results</h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                <div className=\"bg-gray-50 p-3 rounded\"><h3 className=\"font-semibold mb-2\">Summary</h3><ul className=\"space-y-1\"><li>Total Words: <span className=\"font-medium\">{matchStats.total}</span></li><li>Words Processed: <span className=\"font-medium\">{processedCount}</span></li><li>Matched Words: <span className=\"font-medium text-green-600\">{matchStats.matched}</span> ({processedCount > 0 ? Math.round((matchStats.matched / processedCount) * 100) : 0}%)</li><li>Unmatched Words: <span className=\"font-medium text-red-600\">{matchStats.unmatched}</span> ({processedCount > 0 ? Math.round((matchStats.unmatched / processedCount) * 100) : 0}%)</li></ul></div>\n                {chartData.length > 0 && (<div className=\"bg-gray-50 p-3 rounded h-64\"><h3 className=\"font-semibold mb-2\">POS Distribution</h3><ResponsiveContainer width=\"100%\" height=\"90%\"><BarChart data={chartData.slice(0, 10)} margin={{ top: 5, right: 20, left: 10, bottom: 5 }}><CartesianGrid strokeDasharray=\"3 3\" /><XAxis dataKey=\"pos\" /><YAxis /><Tooltip formatter={(value, name, props) => [`${value} (${props.payload.percentage}%)`, 'Count']} /><Bar dataKey=\"count\" fill=\"#3b82f6\" /></BarChart></ResponsiveContainer></div>)}\n              </div>\n              <div className=\"flex flex-wrap gap-3 mb-4\">\n                {hasMoreBatches && (<button className=\"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded\" onClick={processNextBatch} disabled={processingBatch}>{processingBatch ? 'Processing...' : `Process Next Batch (${Math.min(batchSize, csvData.length - processedCount)} words)`}</button>)}\n                <button className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\" onClick={copyResultsToClipboard} disabled={matchedResults.length === 0}>Copy Results to Clipboard</button>\n                <div className=\"flex items-center\"><input type=\"checkbox\" id=\"showMorphAnalysis\" checked={showMorphAnalysis} onChange={(e) => setShowMorphAnalysis(e.target.checked)} className=\"mr-2\" /><label htmlFor=\"showMorphAnalysis\" className=\"text-sm\">Show morphological analysis</label></div>\n                <div className=\"flex items-center ml-auto\"><input type=\"checkbox\" id=\"showUnmatched\" checked={showUnmatched} onChange={(e) => setShowUnmatched(e.target.checked)} className=\"mr-2\" /><label htmlFor=\"showUnmatched\" className=\"text-sm\">Show unmatched words</label></div>\n              </div>\n              {morphologicalStats && (\n                <div className=\"mb-6 bg-gray-50 p-4 rounded\"><h3 className=\"font-semibold mb-3\">Morphological Analysis Summary</h3><div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\"><div><h4 className=\"font-medium mb-2\">Complexity Distribution</h4><div className=\"space-y-1 text-sm\">{Object.entries(morphologicalStats.complexityDistribution).map(([level, count]) => (<div key={level} className=\"flex justify-between\"><span>{level}:</span><span className=\"font-medium\">{count}</span></div>))}</div></div><div><h4 className=\"font-medium mb-2\">Avg Complexity by POS</h4><div className=\"space-y-1 text-sm\">{Object.entries(morphologicalStats.averageComplexityByPOS).sort(([, a], [, b]) => b - a).map(([pos, avg]) => (<div key={pos} className=\"flex justify-between\"><span>{pos}:</span><span className=\"font-medium\">{avg}</span></div>))}</div></div><div><h4 className=\"font-medium mb-2\">Common Patterns</h4><div className=\"space-y-1 text-sm\">{Object.entries(morphologicalStats.patterns).sort(([, a], [, b]) => b - a).slice(0, 5).map(([pattern, count]) => (<div key={pattern} className=\"flex justify-between\"><span className=\"font-mono text-xs\">{pattern}:</span><span className=\"font-medium\">{count}</span></div>))}</div></div></div></div>\n              )}\n              <div className=\"overflow-x-auto\"><table className=\"min-w-full border-collapse border border-gray-300\"><thead><tr className=\"bg-gray-100\"><th className=\"border border-gray-300 px-4 py-2 text-left\">Word</th><th className=\"border border-gray-300 px-4 py-2 text-left\">Freq</th><th className=\"border border-gray-300 px-4 py-2 text-left\">Lemma</th><th className=\"border border-gray-300 px-4 py-2 text-left\">POS</th><th className=\"border border-gray-300 px-4 py-2 text-left\">Gloss</th><th className=\"border border-gray-300 px-4 py-2 text-left\">Morphemes</th><th className=\"border border-gray-300 px-4 py-2 text-left\">#</th>{showMorphAnalysis && (<><th className=\"border border-gray-300 px-4 py-2 text-left\">Structure</th><th className=\"border border-gray-300 px-4 py-2 text-left\">Analysis</th><th className=\"border border-gray-300 px-4 py-2 text-left\">Complexity</th></>)}</tr></thead><tbody>\n                {matchedResults.map((result) => {\n                  if (result.matches.length === 0) {\n                    if (!showUnmatched) return null;\n                    return (<tr key={`unmatched-${result.originalIndex}`} className=\"bg-red-50\"><td className=\"border border-gray-300 px-4 py-2\">{result.word}</td><td className=\"border border-gray-300 px-4 py-2\">{result.frequency}</td><td className=\"border border-gray-300 px-4 py-2 text-red-500\" colSpan={showMorphAnalysis ? 8 : 5}>Not found</td></tr>);\n                  }\n                  return result.matches.map((match, matchIdx) => {\n                    const morphCount = countMorphemes(match.Morphemes);\n                    const morphAnalysis = analyzeMorphemeStructure(match.Morphemes, match.POS);\n                    const complexityLevel = calculateComplexityLevel(morphCount);\n                    return (\n                      <tr key={`match-${result.originalIndex}-${matchIdx}`} className={matchIdx > 0 ? \"bg-blue-50\" : \"\"}>\n                        <td className=\"border border-gray-300 px-4 py-2\">{matchIdx === 0 ? result.word : \"\"}</td>\n                        <td className=\"border border-gray-300 px-4 py-2\">{matchIdx === 0 ? result.frequency : \"\"}</td>\n                        <td className=\"border border-gray-300 px-4 py-2\">{match.Lemma}</td><td className=\"border border-gray-300 px-4 py-2\">{match.POS}</td>\n                        <td className=\"border border-gray-300 px-4 py-2 text-sm\">{match.Gloss}</td>\n                        <td className=\"border border-gray-300 px-4 py-2 font-mono text-sm\">{match.Morphemes}</td>\n                        <td className=\"border border-gray-300 px-4 py-2 text-center font-medium\">{morphCount}</td>\n                        {showMorphAnalysis && (<>\n                          <td className=\"border border-gray-300 px-4 py-2 font-mono text-xs\">{morphAnalysis.structure}</td>\n                          <td className=\"border border-gray-300 px-4 py-2 text-xs\">{morphAnalysis.analysis}</td>\n                          <td className=\"border border-gray-300 px-4 py-2 text-center text-sm\">\n                            <span className={`px-2 py-1 rounded text-xs ${\n                              complexityLevel.startsWith('Very High') ? 'bg-red-100 text-red-800' :\n                              complexityLevel.startsWith('High') ? 'bg-orange-100 text-orange-800' :\n                              complexityLevel.startsWith('Moderate') ? 'bg-yellow-100 text-yellow-800' :\n                              complexityLevel.startsWith('Low') ? 'bg-green-100 text-green-800' :\n                              complexityLevel.startsWith('Simple') ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'\n                            }`}>{complexityLevel}</span>\n                          </td>\n                        </>)}\n                      </tr>\n                    );\n                  });\n                })}\n              </tbody></table></div>\n              {hasMoreBatches && (<div className=\"mt-4 text-center\"><button className=\"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded\" onClick={processNextBatch} disabled={processingBatch}>{processingBatch ? 'Processing...' : `Process Next Batch (${Math.min(batchSize, csvData.length - processedCount)} words)`}</button></div>)}\n            </div>\n          )}\n          <div className=\"bg-blue-50 p-4 rounded\"><h3 className=\"font-semibold mb-2\">Instructions</h3><ol className=\"list-decimal pl-5 space-y-1\"><li><strong>Step 1:</strong> Paste your lemmatized reference lexicon (TSV format, with headers 'Word', 'Morphemes', etc.) and click \"Load Reference Data\"</li><li><strong>Step 2:</strong> Paste your Georgian word list CSV and click \"Parse CSV\"</li><li><strong>Step 3:</strong> Process words in batches and review matches and the refined morphological analysis.</li></ol></div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}