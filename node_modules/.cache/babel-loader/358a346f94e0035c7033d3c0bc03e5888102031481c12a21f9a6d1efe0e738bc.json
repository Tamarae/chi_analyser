{"ast":null,"code":"var _jsxFileName = \"/Users/tamarkalkhitashvili/Documents/chi_analyser/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Papa from 'papaparse';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n// Assuming you have an App.css file for styling\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Reference data state\n  const [referenceData, setReferenceData] = useState([]);\n  const [indexedData, setIndexedData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [referenceLoaded, setReferenceLoaded] = useState(false);\n  const [referenceCSV, setReferenceCSV] = useState('');\n\n  // Georgian to Latin transcription mapping\n  const georgianToLatin = {\n    'ა': 'a',\n    'ბ': 'b',\n    'გ': 'g',\n    'დ': 'd',\n    'ე': 'e',\n    'ვ': 'v',\n    'ზ': 'z',\n    'თ': 't',\n    'ი': 'i',\n    'კ': 'k',\n    'ლ': 'l',\n    'მ': 'm',\n    'ნ': 'n',\n    'ო': 'o',\n    'პ': 'p',\n    'ჟ': 'zh',\n    'რ': 'r',\n    'ს': 's',\n    'ტ': 't',\n    'უ': 'u',\n    'ფ': 'f',\n    'ქ': 'k',\n    'ღ': 'gh',\n    'ყ': 'q',\n    'შ': 'sh',\n    'ჩ': 'ch',\n    'ც': 'c',\n    'ძ': 'dz',\n    'წ': 'c',\n    'ჭ': 'ch',\n    'ხ': 'x',\n    'ჯ': 'j',\n    'ჰ': 'h'\n  };\n\n  // REFINED Georgian morphological analyzer\n  const georgianMorphologyAnalyzer = {\n    preverbs: ['გა', 'მო', 'და', 'ა', 'შე', 'წა', 'მი', 'გადა', 'გამო', 'შემო', 'ჩა', 'ამო', 'წამო', 'გან'],\n    personMarkers: {\n      'ვ': '1SUBJ',\n      'მ': '1OBJ',\n      'გ': '2OBJ',\n      'ჰ': '3OBJ',\n      'ს': '3OBJ/3SUBJ',\n      'ხ': '2SUBJ',\n      'გვ': '1plOBJ',\n      'თ': '2plSUBJ/PL',\n      'ან': '3plSUBJ',\n      'ენ': '3plSUBJ',\n      'ეს': '3plSUBJ',\n      'ნენ': '3plSUBJ'\n    },\n    versionVowels: {\n      'ა': 'VER.VOW',\n      'ი': 'VER.VOW',\n      'უ': 'VER.VOW',\n      'ე': 'VER.VOW'\n    },\n    tenseAspectMood: {\n      'ებ': 'TAM (Present/Future Stem)',\n      'ობ': 'TAM (Present/Future Stem)',\n      'ავ': 'TAM (Present/Future Stem)',\n      'ამ': 'TAM (Present/Future Stem)',\n      'ი': 'TAM (Aorist/Perfect)',\n      'ა': 'TAM (Aorist/Perfect)',\n      'ე': 'TAM (Aorist/Imperative)',\n      'ო': 'TAM (Optative)',\n      'ს': 'TAM (3sg Present)',\n      'დ': 'TAM (Imperfect/Passive)',\n      'ილ': 'TAM (Perfect Participle)',\n      'ულ': 'TAM (Past Participle)'\n    },\n    nounAffixes: {\n      'ი': 'CASE (Nominative)',\n      'მა': 'CASE (Ergative)',\n      'მ': 'CASE (Ergative)',\n      'ს': 'CASE (Genitive/Dative)',\n      'ით': 'CASE (Instrumental)',\n      'ად': 'CASE (Adverbial)',\n      'ო': 'CASE (Vocative)',\n      'ში': 'CASE (Inessive)',\n      'ზე': 'CASE (Superessive)',\n      'დან': 'CASE (Ablative)',\n      'მდე': 'CASE (Terminative)',\n      'თან': 'CASE (Comitative)',\n      'კენ': 'CASE (Adessive)',\n      'გან': 'CASE (Originative)',\n      'ებ': 'PL',\n      'ნი': 'PL'\n    },\n    particles: {\n      'ც': 'PART (also/too)',\n      'ო': 'PART (Quotative)',\n      'მეთქი': 'PART (I said)',\n      'ვე': 'PART (indeed)',\n      'ღა': 'PART (else)'\n    },\n    derivational: {\n      'ელ': 'DER (Origin)',\n      'ურ': 'DER (Adjective)',\n      'იკო': 'DER (Diminutive)',\n      'უნა': 'DER (Diminutive)',\n      'ულ': 'DER (Adjective)',\n      'იან': 'DER (Possessive Adj)',\n      'ობ': 'DER (Abstract Noun)',\n      'სა': 'DER (Purpose)'\n    }\n  };\n\n  // Final, most accurate analysis function\n  const analyzeMorphemeStructure = (morphemes, pos) => {\n    if (!morphemes || typeof morphemes !== 'string' || morphemes.trim() === '') {\n      return {\n        structure: 'No morphemes',\n        analysis: 'No morphological data available',\n        complexity: 0,\n        pattern: 'SIMPLE'\n      };\n    }\n    const parts = morphemes.split('-').filter(part => part.trim().length > 0);\n    const structure = [];\n    const analysis = [];\n    let rootFound = false;\n    parts.forEach((part, index) => {\n      const cleanPart = part.trim();\n      let identified = false;\n      if (!identified && georgianMorphologyAnalyzer.versionVowels[cleanPart] && pos === 'VERB') {\n        const isAlsoPreverb = georgianMorphologyAnalyzer.preverbs.includes(cleanPart);\n        if (!isAlsoPreverb || isAlsoPreverb && index > 0) {\n          structure.push('VER.VOW');\n          analysis.push(`${cleanPart}(version vowel)`);\n          identified = true;\n        }\n      }\n      if (!identified && georgianMorphologyAnalyzer.preverbs.includes(cleanPart)) {\n        structure.push('PREV');\n        analysis.push(`${cleanPart}(preverb)`);\n        identified = true;\n      }\n      if (!identified && georgianMorphologyAnalyzer.personMarkers[cleanPart]) {\n        const role = georgianMorphologyAnalyzer.personMarkers[cleanPart];\n        structure.push(`PERS.${role.includes('SUBJ') ? 'S' : 'O'}`);\n        analysis.push(`${cleanPart}(${role.toLowerCase()})`);\n        identified = true;\n      }\n      if (!identified && pos === 'VERB' && georgianMorphologyAnalyzer.tenseAspectMood[cleanPart]) {\n        const role = georgianMorphologyAnalyzer.tenseAspectMood[cleanPart];\n        if (cleanPart === 'დ') {\n          structure.push('PASS');\n          analysis.push(`${cleanPart}(passive/medial)`);\n        } else {\n          structure.push('TAM');\n          analysis.push(`${cleanPart}(${role.replace('TAM ', '')})`);\n        }\n        identified = true;\n      }\n      if (!identified && (pos === 'NOUN' || pos === 'PROPN' || pos === 'PRON' || pos === 'ADJ' || pos === 'PTCPL') && georgianMorphologyAnalyzer.nounAffixes[cleanPart]) {\n        const role = georgianMorphologyAnalyzer.nounAffixes[cleanPart];\n        structure.push(role.startsWith('CASE') ? 'CASE' : role);\n        analysis.push(`${cleanPart}(${role.replace('CASE ', '').toLowerCase()})`);\n        identified = true;\n      }\n      if (!identified && georgianMorphologyAnalyzer.particles[cleanPart]) {\n        structure.push('PART');\n        analysis.push(`${cleanPart}(${georgianMorphologyAnalyzer.particles[cleanPart].replace('PART ', '').toLowerCase()})`);\n        identified = true;\n      }\n      if (!identified && georgianMorphologyAnalyzer.derivational[cleanPart]) {\n        structure.push('DER');\n        analysis.push(`${cleanPart}(${georgianMorphologyAnalyzer.derivational[cleanPart].replace('DER ', '').toLowerCase()})`);\n        identified = true;\n      }\n      if (!identified) {\n        if (!rootFound) {\n          structure.push('ROOT');\n          analysis.push(`${cleanPart}(root)`);\n          rootFound = true;\n        } else {\n          structure.push('STEM');\n          analysis.push(`${cleanPart}(stem)`);\n        }\n      }\n    });\n    return {\n      structure: structure.join('-'),\n      analysis: analysis.join(' + '),\n      complexity: parts.length,\n      pattern: structure.join('-')\n    };\n  };\n  const calculateRelativeComplexity = (morphemeCount, pos, allResults) => {\n    if (morphemeCount === 0) return 'No data';\n    const samePOSCounts = allResults.flatMap(result => result.matches).filter(match => match.POS === pos).map(match => countMorphemes(match.Morphemes)).filter(count => count > 0);\n    if (samePOSCounts.length === 0) return 'No comparison data';\n    const average = samePOSCounts.reduce((sum, count) => sum + count, 0) / samePOSCounts.length;\n    const ratio = morphemeCount / average;\n    if (ratio >= 1.5) return 'Very High';\n    if (ratio >= 1.2) return 'High';\n    if (ratio >= 0.8) return 'Average';\n    if (ratio >= 0.6) return 'Low';\n    return 'Very Low';\n  };\n\n  // Helper function to count morphemes\n  const countMorphemes = morphemes => {\n    if (!morphemes || typeof morphemes !== 'string' || morphemes.trim() === '') return 0;\n    return morphemes.split('-').filter(part => part.trim().length > 0).length;\n  };\n  const createTranscriptionVariants = georgianWord => {\n    if (!georgianWord || typeof georgianWord !== 'string') return [];\n    let variants = new Set();\n    let basicLatin = '';\n    for (let char of georgianWord.toLowerCase()) {\n      basicLatin += georgianToLatin[char] || char;\n    }\n    variants.add(basicLatin);\n    let variant1 = basicLatin.replace(/k/g, \"k'\").replace(/t/g, \"t'\").replace(/p/g, \"p'\").replace(/q/g, \"q'\");\n    variants.add(variant1);\n    let variant2 = basicLatin.replace(/k'/g, \"k\").replace(/t'/g, \"t\").replace(/p'/g, \"p\").replace(/q'/g, \"q\");\n    variants.add(variant2);\n    variants.add(basicLatin.replace(/c/g, 'ts'));\n    variants.add(basicLatin.replace(/c/g, \"ts'\"));\n    variants.add(basicLatin.replace(/ch/g, 'c'));\n    variants.add(basicLatin.replace(/ch/g, \"ch'\"));\n    return Array.from(variants).filter(v => v.length > 0);\n  };\n  const [userCSV, setUserCSV] = useState('');\n  const [csvData, setCsvData] = useState([]);\n  const [parseProgress, setParseProgress] = useState(0);\n  const [batchSize, setBatchSize] = useState(500);\n  const [currentBatch, setCurrentBatch] = useState(1);\n  const [processingBatch, setProcessingBatch] = useState(false);\n  const [matchedResults, setMatchedResults] = useState([]);\n  const [matchStats, setMatchStats] = useState({\n    total: 0,\n    matched: 0,\n    unmatched: 0,\n    byPOS: {}\n  });\n  const [showUnmatched, setShowUnmatched] = useState(false);\n  const [showMorphAnalysis, setShowMorphAnalysis] = useState(true); // Added for the new columns\n  const resultsRef = useRef(null);\n  const detectDelimiter = data => {\n    const firstLine = data.split('\\n')[0];\n    const tabCount = (firstLine.match(/\\t/g) || []).length;\n    const commaCount = (firstLine.match(/,/g) || []).length;\n    return tabCount > commaCount ? '\\t' : ',';\n  };\n  const loadReferenceData = () => {\n    if (!referenceCSV.trim()) {\n      setError('Please paste your reference lemma data first.');\n      return;\n    }\n    try {\n      setLoading(true);\n      setError('');\n      const delimiter = detectDelimiter(referenceCSV);\n      const fileType = delimiter === '\\t' ? 'TSV' : 'CSV';\n      Papa.parse(referenceCSV, {\n        header: true,\n        skipEmptyLines: true,\n        dynamicTyping: true,\n        delimiter: delimiter,\n        complete: result => {\n          if (result.data.length > 0) {\n            const firstRow = result.data[0];\n            const headers = Object.keys(firstRow);\n            const hasNewFormat = headers.some(h => h.toLowerCase() === 'word') && headers.some(h => h.toLowerCase() === 'morphemes');\n            if (!hasNewFormat) {\n              setError(`${fileType} must have at least \"Word\" and \"Morphemes\" columns.`);\n              setLoading(false);\n              return;\n            }\n            setReferenceData(result.data);\n            const wordIndex = {};\n            result.data.forEach((row, rowIdx) => {\n              const wordKey = headers.find(h => h.toLowerCase() === 'word');\n              if (wordKey && row[wordKey]) {\n                const word = row[wordKey].toString().toLowerCase().trim();\n                if (word) {\n                  if (!wordIndex[word]) wordIndex[word] = [];\n                  wordIndex[word].push(rowIdx);\n                }\n              }\n            });\n            setIndexedData({\n              exact: wordIndex\n            });\n            setReferenceLoaded(true);\n            setLoading(false);\n            setError(`✓ ${fileType} data loaded successfully with ${result.data.length} entries`);\n            setTimeout(() => setError(''), 3000);\n          } else {\n            setError('Reference data appears to be empty.');\n            setLoading(false);\n          }\n        },\n        error: error => {\n          setError('Error parsing reference data: ' + error.message);\n          setLoading(false);\n        }\n      });\n    } catch (err) {\n      setError('Failed to process reference data: ' + err.message);\n      setLoading(false);\n    }\n  };\n  const parseUserCSV = () => {\n    if (!userCSV.trim()) return;\n    try {\n      Papa.parse(userCSV, {\n        header: true,\n        skipEmptyLines: true,\n        dynamicTyping: true,\n        complete: result => {\n          if (result.data.length > 0) {\n            const firstRow = result.data[0];\n            if (!('Word' in firstRow) && !('word' in firstRow)) {\n              setError('CSV must have a \"Word\" column.');\n              return;\n            }\n            const normalizedData = result.data.map(row => {\n              const normalizedRow = {};\n              Object.keys(row).forEach(key => {\n                const lowerKey = key.toLowerCase();\n                if (lowerKey === 'word') normalizedRow.Word = row[key];else if (lowerKey === 'freq' || lowerKey === 'frequency') normalizedRow.Freq = row[key];else normalizedRow[key] = row[key];\n              });\n              return normalizedRow;\n            });\n            setCsvData(normalizedData);\n            setCurrentBatch(1);\n            setMatchedResults([]);\n            setMatchStats({\n              total: normalizedData.length,\n              matched: 0,\n              unmatched: 0,\n              byPOS: {}\n            });\n            setParseProgress(0);\n          } else {\n            setError('CSV appears to be empty.');\n          }\n        },\n        error: error => {\n          setError('Error parsing your CSV: ' + error.message);\n        }\n      });\n    } catch (err) {\n      setError('Failed to process CSV: ' + err.message);\n    }\n  };\n  const findMatches = word => {\n    if (!word || typeof word !== 'string') return [];\n    const searchWord = word.toLowerCase().trim();\n    let matches = [];\n    if (indexedData.exact && indexedData.exact[searchWord]) {\n      matches = indexedData.exact[searchWord].map(idx => referenceData[idx]);\n    }\n    if (matches.length === 0 && /[\\u10A0-\\u10FF]/.test(searchWord)) {\n      const variants = createTranscriptionVariants(searchWord);\n      for (const variant of variants) {\n        if (indexedData.exact && indexedData.exact[variant]) {\n          const variantMatches = indexedData.exact[variant].map(idx => ({\n            ...referenceData[idx],\n            transcriptionVariant: variant\n          }));\n          matches.push(...variantMatches);\n        }\n      }\n    }\n    return matches.filter((match, index, self) => index === self.findIndex(m => m.Lemma === match.Lemma && m.Morphemes === match.Morphemes));\n  };\n  const processBatch = () => {\n    if (csvData.length === 0) return;\n    setProcessingBatch(true);\n    const startIdx = (currentBatch - 1) * batchSize;\n    const endIdx = Math.min(startIdx + batchSize, csvData.length);\n    const currentItems = csvData.slice(startIdx, endIdx);\n    setTimeout(() => {\n      const batchResults = [];\n      const newMatchStats = {\n        ...matchStats\n      };\n      currentItems.forEach((item, idx) => {\n        const word = item.Word || '';\n        const frequency = item.Freq || 0;\n        const matches = findMatches(word);\n        if (matches.length > 0) {\n          newMatchStats.matched += 1;\n          matches.forEach(match => {\n            const pos = match.POS || 'Unknown';\n            newMatchStats.byPOS[pos] = (newMatchStats.byPOS[pos] || 0) + 1;\n          });\n        } else {\n          newMatchStats.unmatched += 1;\n        }\n        batchResults.push({\n          word,\n          frequency,\n          matches,\n          originalIndex: startIdx + idx\n        });\n        setParseProgress(Math.round((startIdx + idx + 1) / csvData.length * 100));\n      });\n      setMatchedResults(prev => [...prev, ...batchResults]);\n      setMatchStats(newMatchStats);\n      setProcessingBatch(false);\n      if (resultsRef.current) {\n        resultsRef.current.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    }, 100);\n  };\n  const processNextBatch = () => {\n    if (currentBatch * batchSize < csvData.length) {\n      setCurrentBatch(prev => prev + 1);\n    }\n  };\n  const resetResults = () => {\n    setCsvData([]);\n    setMatchedResults([]);\n    setParseProgress(0);\n    setCurrentBatch(1);\n    setMatchStats({\n      total: 0,\n      matched: 0,\n      unmatched: 0,\n      byPOS: {}\n    });\n  };\n  const copyResultsToClipboard = () => {\n    if (matchedResults.length === 0) return;\n    const headers = showMorphAnalysis ? \"Word\\tFrequency\\tLemma\\tPOS\\tGloss\\tMorphemes\\tMorpheme_Count\\tMorphological_Structure\\tMorphological_Analysis\\tComplexity_Level\\n\" : \"Word\\tFrequency\\tLemma\\tPOS\\tGloss\\tMorphemes\\tMorpheme_Count\\n\";\n    const rows = matchedResults.flatMap(result => {\n      if (result.matches.length === 0) {\n        return showUnmatched ? showMorphAnalysis ? [`${result.word}\\t${result.frequency}\\t\\t\\t\\t\\t0\\t\\t\\t`] : [`${result.word}\\t${result.frequency}\\t\\t\\t\\t\\t0`] : [];\n      }\n      return result.matches.map(match => {\n        const morphCount = countMorphemes(match.Morphemes);\n        const morphAnalysis = analyzeMorphemeStructure(match.Morphemes, match.POS);\n        const complexityLevel = calculateRelativeComplexity(morphCount, match.POS, matchedResults);\n        return showMorphAnalysis ? `${result.word}\\t${result.frequency}\\t${match.Lemma || ''}\\t${match.POS || ''}\\t${match.Gloss || ''}\\t${match.Morphemes || ''}\\t${morphCount}\\t${morphAnalysis.structure}\\t${morphAnalysis.analysis}\\t${complexityLevel}` : `${result.word}\\t${result.frequency}\\t${match.Lemma || ''}\\t${match.POS || ''}\\t${match.Gloss || ''}\\t${match.Morphemes || ''}\\t${morphCount}`;\n      });\n    }).join('\\n');\n    navigator.clipboard.writeText(headers + rows).then(() => {\n      setError('Results copied to clipboard successfully!');\n      setTimeout(() => setError(''), 3000);\n    }).catch(() => {\n      setError('Failed to copy results.');\n      setTimeout(() => setError(''), 3000);\n    });\n  };\n  useEffect(() => {\n    if (csvData.length > 0 && !processingBatch) {\n      processBatch();\n    }\n  }, [currentBatch, csvData]);\n  const hasMoreBatches = csvData.length > 0 && currentBatch * batchSize < csvData.length;\n  const processedCount = Math.min(currentBatch * batchSize, csvData.length);\n  const chartData = Object.entries(matchStats.byPOS).map(([pos, count]) => ({\n    pos,\n    count,\n    percentage: matchStats.matched > 0 ? Math.round(count / matchStats.matched * 100) : 0\n  })).sort((a, b) => b.count - a.count);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 max-w-7xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Georgian-Latin Lemma Matcher\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `border px-4 py-3 rounded mb-4 ${error.includes('✓') ? 'bg-green-100 border-green-400 text-green-700' : 'bg-red-100 border-red-400 text-red-700'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 182\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"float-right font-bold\",\n        onClick: () => setError(''),\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 196\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 18\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center py-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mb-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 53\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Processing data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 155\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded shadow\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-3\",\n          children: \"Step 1: Load Reference Lemma Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700 mb-1\",\n            children: \"Paste your lemmatized reference data (CSV or TSV):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"w-full p-2 border rounded h-32 font-mono text-sm\",\n            value: referenceCSV,\n            onChange: e => setReferenceCSV(e.target.value),\n            placeholder: \"New format: Word[TAB]Frequency[TAB]Lemma[TAB]POS[TAB]Gloss[TAB]Morphemes\\nOR\\nCSV format: Words (Frequency),Lemma,Total,POS,Gloss\\nOR\\nTSV format: Word forms[TAB]Lemma[TAB]POS[TAB]Gloss\",\n            disabled: referenceLoaded\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3 text-sm text-gray-600\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Supported formats:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 18\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"list-disc pl-5 mt-1\",\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"New TSV:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 21\n              }, this), \" Headers \\\"Word\\\", \\\"Frequency\\\", \\\"Lemma\\\", \\\"POS\\\", \\\"Gloss\\\", \\\"Morphemes\\\"\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"CSV:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 21\n              }, this), \" Headers \\\"Words (Frequency)\\\", \\\"Lemma\\\", \\\"POS\\\", \\\"Gloss\\\"\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"TSV:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 21\n              }, this), \" Headers \\\"Word forms\\\", \\\"Lemma\\\", \\\"POS\\\", \\\"Gloss\\\"\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex gap-3 items-center\",\n          children: [!referenceLoaded ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\",\n            onClick: loadReferenceData,\n            disabled: !referenceCSV.trim() || loading,\n            children: \"Load Reference Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 36\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm\",\n            children: [\"\\u2713 Reference data loaded (\", referenceData.length, \" entries)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 219\n          }, this), referenceLoaded && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"text-blue-600 hover:text-blue-800 text-sm\",\n            onClick: () => {\n              setReferenceLoaded(false);\n              setReferenceData([]);\n              setIndexedData({});\n            },\n            children: \"Reset Reference Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 36\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `bg-white p-4 rounded shadow ${!referenceLoaded ? 'opacity-50' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-3\",\n          children: \"Step 2: Input Your Georgian Word List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700 mb-1\",\n            children: \"Paste your CSV data with Georgian words:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"w-full p-2 border rounded h-48 font-mono text-sm\",\n            value: userCSV,\n            onChange: e => setUserCSV(e.target.value),\n            placeholder: \"Freq,Word\\n1,\\u10DD\\u10E0\\u10D8\\n1,\\u10DE\\u10E3\\u10DB\\u10D1\\u10D0\\n1,\\u10D9\\u10D0\\u10E0\\u10D0\\u10E5\\u10D8\",\n            disabled: !referenceLoaded\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-wrap gap-3 items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\",\n            onClick: parseUserCSV,\n            disabled: !referenceLoaded || !userCSV.trim() || processingBatch,\n            children: \"Parse CSV\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"text-sm font-medium text-gray-700 mr-2\",\n              children: \"Batch Size:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 50\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"border rounded p-1\",\n              value: batchSize,\n              onChange: e => setBatchSize(Number(e.target.value)),\n              disabled: !referenceLoaded,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: 100,\n                children: \"100\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 267\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: 250,\n                children: \"250\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 299\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: 500,\n                children: \"500\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 331\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: 1000,\n                children: \"1000\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 363\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 127\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 15\n          }, this), csvData.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm text-gray-600\",\n            children: [processedCount, \" of \", csvData.length, \" words processed (\", Math.round(processedCount / csvData.length * 100), \"%)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 38\n          }, this), csvData.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"text-red-600 hover:text-red-800 text-sm\",\n            onClick: resetResults,\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 38\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 13\n        }, this), parseProgress > 0 && parseProgress < 100 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-full bg-gray-200 rounded-full h-2.5 mt-4\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-blue-600 h-2.5 rounded-full\",\n            style: {\n              width: `${parseProgress}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 119\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 59\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 11\n      }, this), matchedResults.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded shadow\",\n        ref: resultsRef,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-3\",\n          children: \"Step 3: Matching Results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gray-50 p-3 rounded\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"font-semibold mb-2\",\n              children: \"Summary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 57\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"space-y-1\",\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Total Words: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium\",\n                  children: matchStats.total\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 381,\n                  columnNumber: 147\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 130\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Words Processed: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium\",\n                  children: processedCount\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 381,\n                  columnNumber: 228\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 207\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Matched Words: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium text-green-600\",\n                  children: matchStats.matched\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 381,\n                  columnNumber: 305\n                }, this), \" (\", processedCount > 0 ? Math.round(matchStats.matched / processedCount * 100) : 0, \"%)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 286\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Unmatched Words: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium text-red-600\",\n                  children: matchStats.unmatched\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 381,\n                  columnNumber: 489\n                }, this), \" (\", processedCount > 0 ? Math.round(matchStats.unmatched / processedCount * 100) : 0, \"%)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 468\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 104\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 17\n          }, this), chartData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gray-50 p-3 rounded h-64\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"font-semibold mb-2\",\n              children: \"POS Distribution\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 88\n            }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n              width: \"100%\",\n              height: \"90%\",\n              children: /*#__PURE__*/_jsxDEV(BarChart, {\n                data: chartData.slice(0, 10),\n                margin: {\n                  top: 5,\n                  right: 20,\n                  left: 10,\n                  bottom: 5\n                },\n                children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                  strokeDasharray: \"3 3\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 283\n                }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                  dataKey: \"pos\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 322\n                }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 345\n                }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                  formatter: (value, name, props) => [`${value} (${props.payload.percentage}%)`, 'Count']\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 354\n                }, this), /*#__PURE__*/_jsxDEV(Bar, {\n                  dataKey: \"count\",\n                  fill: \"#3b82f6\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 454\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 382,\n                columnNumber: 191\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 144\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 43\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-wrap gap-3 mb-4\",\n          children: [hasMoreBatches && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded\",\n            onClick: processNextBatch,\n            disabled: processingBatch,\n            children: processingBatch ? 'Processing...' : `Process Next Batch (${Math.min(batchSize, csvData.length - processedCount)} words)`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\",\n            onClick: copyResultsToClipboard,\n            disabled: matchedResults.length === 0,\n            children: \"Copy Results to Clipboard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: \"showMorphAnalysis\",\n              checked: showMorphAnalysis,\n              onChange: e => setShowMorphAnalysis(e.target.checked),\n              className: \"mr-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 52\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"showMorphAnalysis\",\n              className: \"text-sm\",\n              children: \"Show morphological analysis\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 202\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center ml-auto\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: \"showUnmatched\",\n              checked: showUnmatched,\n              onChange: e => setShowUnmatched(e.target.checked),\n              className: \"mr-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 60\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"showUnmatched\",\n              className: \"text-sm\",\n              children: \"Show unmatched words\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 198\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overflow-x-auto\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"min-w-full border-collapse border border-gray-300\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                className: \"bg-gray-100\",\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"Word\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 394,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"Frequency\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 395,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"Lemma\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 396,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"POS\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 397,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"Gloss\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 398,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"Morphemes\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 399,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"Morpheme Count\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 400,\n                  columnNumber: 21\n                }, this), showMorphAnalysis && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"border border-gray-300 px-4 py-2 text-left\",\n                    children: \"Morphological Structure\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 401,\n                    columnNumber: 46\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"border border-gray-300 px-4 py-2 text-left\",\n                    children: \"Morphological Analysis\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 401,\n                    columnNumber: 133\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"border border-gray-300 px-4 py-2 text-left\",\n                    children: \"Complexity Level\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 401,\n                    columnNumber: 219\n                  }, this)]\n                }, void 0, true)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 26\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: matchedResults.map(result => {\n                if (result.matches.length === 0) {\n                  if (!showUnmatched) return null;\n                  return /*#__PURE__*/_jsxDEV(\"tr\", {\n                    className: \"bg-red-50\",\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2\",\n                      children: result.word\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 406,\n                      columnNumber: 99\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2\",\n                      children: result.frequency\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 406,\n                      columnNumber: 166\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2 text-red-500\",\n                      colSpan: showMorphAnalysis ? 8 : 5,\n                      children: \"Not found\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 406,\n                      columnNumber: 238\n                    }, this)]\n                  }, `unmatched-${result.originalIndex}`, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 406,\n                    columnNumber: 31\n                  }, this);\n                }\n                return result.matches.map((match, matchIdx) => {\n                  const morphCount = countMorphemes(match.Morphemes);\n                  const morphAnalysis = analyzeMorphemeStructure(match.Morphemes, match.POS);\n                  const complexityLevel = calculateRelativeComplexity(morphCount, match.POS, matchedResults);\n                  return /*#__PURE__*/_jsxDEV(\"tr\", {\n                    className: matchIdx > 0 ? \"bg-blue-50\" : \"\",\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2\",\n                      children: matchIdx === 0 ? result.word : \"\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 414,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2\",\n                      children: matchIdx === 0 ? result.frequency : \"\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 415,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2\",\n                      children: match.Lemma\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 416,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2\",\n                      children: match.POS\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 417,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2\",\n                      children: match.Gloss\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 418,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2 font-mono text-sm\",\n                      children: match.Morphemes\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 419,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2 text-center font-medium\",\n                      children: morphCount\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 420,\n                      columnNumber: 27\n                    }, this), showMorphAnalysis && /*#__PURE__*/_jsxDEV(_Fragment, {\n                      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                        className: \"border border-gray-300 px-4 py-2 font-mono text-xs\",\n                        children: morphAnalysis.structure\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 422,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        className: \"border border-gray-300 px-4 py-2 text-xs\",\n                        children: morphAnalysis.analysis\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 423,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        className: \"border border-gray-300 px-4 py-2 text-center text-sm\",\n                        children: /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: `px-2 py-1 rounded text-xs ${complexityLevel === 'Very High' ? 'bg-red-100 text-red-800' : complexityLevel === 'High' ? 'bg-orange-100 text-orange-800' : complexityLevel === 'Average' ? 'bg-yellow-100 text-yellow-800' : complexityLevel === 'Low' ? 'bg-green-100 text-green-800' : complexityLevel === 'Very Low' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'}`,\n                          children: complexityLevel\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 425,\n                          columnNumber: 31\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 424,\n                        columnNumber: 29\n                      }, this)]\n                    }, void 0, true)]\n                  }, `match-${result.originalIndex}-${matchIdx}`, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 413,\n                    columnNumber: 25\n                  }, this);\n                });\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 15\n        }, this), hasMoreBatches && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4 text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded\",\n            onClick: processNextBatch,\n            disabled: processingBatch,\n            children: processingBatch ? 'Processing...' : `Process Next Batch (${Math.min(batchSize, csvData.length - processedCount)} words)`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 69\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-blue-50 p-4 rounded\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"font-semibold mb-2\",\n          children: \"Instructions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 51\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          className: \"list-decimal pl-5 space-y-1\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Step 1:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 151\n            }, this), \" Paste your lemmatized reference data (CSV or TSV format) and click \\\"Load Reference Data\\\"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 147\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Step 2:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 273\n            }, this), \" Paste your Georgian word list CSV and click \\\"Parse CSV\\\"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 269\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Step 3:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 362\n            }, this), \" Process words in batches and review matches\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 358\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Use \\\"Copy Results\\\" to export all matches to clipboard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 435\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 103\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mt-2 text-sm text-gray-600\",\n          children: \"This tool supports both exact matching and Georgian-to-Latin transcription matching with multiple variant patterns. It now handles CSV, TSV, and the new morpheme-enhanced TSV format with columns: Word, Frequency, Lemma, POS, Gloss, Morphemes.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 502\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 330,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"7y14ZslOY35vywa7r0cbEoQTMck=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Papa","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","referenceData","setReferenceData","indexedData","setIndexedData","loading","setLoading","error","setError","referenceLoaded","setReferenceLoaded","referenceCSV","setReferenceCSV","georgianToLatin","georgianMorphologyAnalyzer","preverbs","personMarkers","versionVowels","tenseAspectMood","nounAffixes","particles","derivational","analyzeMorphemeStructure","morphemes","pos","trim","structure","analysis","complexity","pattern","parts","split","filter","part","length","rootFound","forEach","index","cleanPart","identified","isAlsoPreverb","includes","push","role","toLowerCase","replace","startsWith","join","calculateRelativeComplexity","morphemeCount","allResults","samePOSCounts","flatMap","result","matches","match","POS","map","countMorphemes","Morphemes","count","average","reduce","sum","ratio","createTranscriptionVariants","georgianWord","variants","Set","basicLatin","char","add","variant1","variant2","Array","from","v","userCSV","setUserCSV","csvData","setCsvData","parseProgress","setParseProgress","batchSize","setBatchSize","currentBatch","setCurrentBatch","processingBatch","setProcessingBatch","matchedResults","setMatchedResults","matchStats","setMatchStats","total","matched","unmatched","byPOS","showUnmatched","setShowUnmatched","showMorphAnalysis","setShowMorphAnalysis","resultsRef","detectDelimiter","data","firstLine","tabCount","commaCount","loadReferenceData","delimiter","fileType","parse","header","skipEmptyLines","dynamicTyping","complete","firstRow","headers","Object","keys","hasNewFormat","some","h","wordIndex","row","rowIdx","wordKey","find","word","toString","exact","setTimeout","message","err","parseUserCSV","normalizedData","normalizedRow","key","lowerKey","Word","Freq","findMatches","searchWord","idx","test","variant","variantMatches","transcriptionVariant","self","findIndex","m","Lemma","processBatch","startIdx","endIdx","Math","min","currentItems","slice","batchResults","newMatchStats","item","frequency","originalIndex","round","prev","current","scrollIntoView","behavior","processNextBatch","resetResults","copyResultsToClipboard","rows","morphCount","morphAnalysis","complexityLevel","Gloss","navigator","clipboard","writeText","then","catch","hasMoreBatches","processedCount","chartData","entries","percentage","sort","a","b","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","onChange","e","target","placeholder","disabled","Number","style","width","ref","height","margin","top","right","left","bottom","strokeDasharray","dataKey","formatter","name","props","payload","fill","type","id","checked","htmlFor","colSpan","matchIdx","_c","$RefreshReg$"],"sources":["/Users/tamarkalkhitashvili/Documents/chi_analyser/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Papa from 'papaparse';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n// Assuming you have an App.css file for styling\nimport './App.css';\n\nfunction App() {\n  // Reference data state\n  const [referenceData, setReferenceData] = useState([]);\n  const [indexedData, setIndexedData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [referenceLoaded, setReferenceLoaded] = useState(false);\n  const [referenceCSV, setReferenceCSV] = useState('');\n\n  // Georgian to Latin transcription mapping\n  const georgianToLatin = {\n    'ა': 'a', 'ბ': 'b', 'გ': 'g', 'დ': 'd', 'ე': 'e', 'ვ': 'v', 'ზ': 'z', 'თ': 't',\n    'ი': 'i', 'კ': 'k', 'ლ': 'l', 'მ': 'm', 'ნ': 'n', 'ო': 'o', 'პ': 'p', 'ჟ': 'zh',\n    'რ': 'r', 'ს': 's', 'ტ': 't', 'უ': 'u', 'ფ': 'f', 'ქ': 'k', 'ღ': 'gh', 'ყ': 'q',\n    'შ': 'sh', 'ჩ': 'ch', 'ც': 'c', 'ძ': 'dz', 'წ': 'c', 'ჭ': 'ch', 'ხ': 'x', 'ჯ': 'j', 'ჰ': 'h'\n  };\n\n  // REFINED Georgian morphological analyzer\n  const georgianMorphologyAnalyzer = {\n    preverbs: ['გა', 'მო', 'და', 'ა', 'შე', 'წა', 'მი', 'გადა', 'გამო', 'შემო', 'ჩა', 'ამო', 'წამო', 'გან'],\n    personMarkers: {\n      'ვ': '1SUBJ', 'მ': '1OBJ', 'გ': '2OBJ', 'ჰ': '3OBJ', 'ს': '3OBJ/3SUBJ', 'ხ': '2SUBJ', 'გვ': '1plOBJ',\n      'თ': '2plSUBJ/PL', 'ან': '3plSUBJ', 'ენ': '3plSUBJ', 'ეს': '3plSUBJ', 'ნენ': '3plSUBJ'\n    },\n    versionVowels: {\n      'ა': 'VER.VOW', 'ი': 'VER.VOW', 'უ': 'VER.VOW', 'ე': 'VER.VOW'\n    },\n    tenseAspectMood: {\n      'ებ': 'TAM (Present/Future Stem)', 'ობ': 'TAM (Present/Future Stem)', 'ავ': 'TAM (Present/Future Stem)', 'ამ': 'TAM (Present/Future Stem)', 'ი': 'TAM (Aorist/Perfect)',\n      'ა': 'TAM (Aorist/Perfect)', 'ე': 'TAM (Aorist/Imperative)', 'ო': 'TAM (Optative)', 'ს': 'TAM (3sg Present)',\n      'დ': 'TAM (Imperfect/Passive)', 'ილ': 'TAM (Perfect Participle)', 'ულ': 'TAM (Past Participle)'\n    },\n    nounAffixes: {\n      'ი': 'CASE (Nominative)', 'მა': 'CASE (Ergative)', 'მ': 'CASE (Ergative)', 'ს': 'CASE (Genitive/Dative)', 'ით': 'CASE (Instrumental)',\n      'ად': 'CASE (Adverbial)', 'ო': 'CASE (Vocative)', 'ში': 'CASE (Inessive)', 'ზე': 'CASE (Superessive)', 'დან': 'CASE (Ablative)',\n      'მდე': 'CASE (Terminative)', 'თან': 'CASE (Comitative)', 'კენ': 'CASE (Adessive)', 'გან': 'CASE (Originative)',\n      'ებ': 'PL', 'ნი': 'PL'\n    },\n    particles: {\n      'ც': 'PART (also/too)', 'ო': 'PART (Quotative)', 'მეთქი': 'PART (I said)', 'ვე': 'PART (indeed)', 'ღა': 'PART (else)'\n    },\n    derivational: {\n      'ელ': 'DER (Origin)', 'ურ': 'DER (Adjective)', 'იკო': 'DER (Diminutive)', 'უნა': 'DER (Diminutive)',\n      'ულ': 'DER (Adjective)', 'იან': 'DER (Possessive Adj)', 'ობ': 'DER (Abstract Noun)', 'სა': 'DER (Purpose)'\n    }\n  };\n\n  // Final, most accurate analysis function\n  const analyzeMorphemeStructure = (morphemes, pos) => {\n    if (!morphemes || typeof morphemes !== 'string' || morphemes.trim() === '') {\n      return { structure: 'No morphemes', analysis: 'No morphological data available', complexity: 0, pattern: 'SIMPLE' };\n    }\n    const parts = morphemes.split('-').filter(part => part.trim().length > 0);\n    const structure = [];\n    const analysis = [];\n    let rootFound = false;\n\n    parts.forEach((part, index) => {\n      const cleanPart = part.trim();\n      let identified = false;\n\n      if (!identified && georgianMorphologyAnalyzer.versionVowels[cleanPart] && pos === 'VERB') {\n        const isAlsoPreverb = georgianMorphologyAnalyzer.preverbs.includes(cleanPart);\n        if (!isAlsoPreverb || (isAlsoPreverb && index > 0)) {\n            structure.push('VER.VOW');\n            analysis.push(`${cleanPart}(version vowel)`);\n            identified = true;\n        }\n      }\n\n      if (!identified && georgianMorphologyAnalyzer.preverbs.includes(cleanPart)) {\n        structure.push('PREV');\n        analysis.push(`${cleanPart}(preverb)`);\n        identified = true;\n      }\n\n      if (!identified && georgianMorphologyAnalyzer.personMarkers[cleanPart]) {\n        const role = georgianMorphologyAnalyzer.personMarkers[cleanPart];\n        structure.push(`PERS.${role.includes('SUBJ') ? 'S' : 'O'}`);\n        analysis.push(`${cleanPart}(${role.toLowerCase()})`);\n        identified = true;\n      }\n\n      if (!identified && pos === 'VERB' && georgianMorphologyAnalyzer.tenseAspectMood[cleanPart]) {\n          const role = georgianMorphologyAnalyzer.tenseAspectMood[cleanPart];\n          if(cleanPart === 'დ') {\n            structure.push('PASS');\n            analysis.push(`${cleanPart}(passive/medial)`);\n          } else {\n            structure.push('TAM');\n            analysis.push(`${cleanPart}(${role.replace('TAM ', '')})`);\n          }\n          identified = true;\n      }\n\n      if (!identified && (pos === 'NOUN' || pos === 'PROPN' || pos === 'PRON' || pos === 'ADJ' || pos === 'PTCPL') && georgianMorphologyAnalyzer.nounAffixes[cleanPart]) {\n          const role = georgianMorphologyAnalyzer.nounAffixes[cleanPart];\n          structure.push(role.startsWith('CASE') ? 'CASE' : role);\n          analysis.push(`${cleanPart}(${role.replace('CASE ', '').toLowerCase()})`);\n          identified = true;\n      }\n\n      if (!identified && georgianMorphologyAnalyzer.particles[cleanPart]) {\n        structure.push('PART');\n        analysis.push(`${cleanPart}(${georgianMorphologyAnalyzer.particles[cleanPart].replace('PART ', '').toLowerCase()})`);\n        identified = true;\n      }\n\n      if (!identified && georgianMorphologyAnalyzer.derivational[cleanPart]) {\n        structure.push('DER');\n        analysis.push(`${cleanPart}(${georgianMorphologyAnalyzer.derivational[cleanPart].replace('DER ', '').toLowerCase()})`);\n        identified = true;\n      }\n\n      if (!identified) {\n        if (!rootFound) {\n          structure.push('ROOT');\n          analysis.push(`${cleanPart}(root)`);\n          rootFound = true;\n        } else {\n          structure.push('STEM');\n          analysis.push(`${cleanPart}(stem)`);\n        }\n      }\n    });\n\n    return {\n      structure: structure.join('-'),\n      analysis: analysis.join(' + '),\n      complexity: parts.length,\n      pattern: structure.join('-')\n    };\n  };\n\n  const calculateRelativeComplexity = (morphemeCount, pos, allResults) => {\n    if (morphemeCount === 0) return 'No data';\n    const samePOSCounts = allResults\n      .flatMap(result => result.matches)\n      .filter(match => match.POS === pos)\n      .map(match => countMorphemes(match.Morphemes))\n      .filter(count => count > 0);\n    if (samePOSCounts.length === 0) return 'No comparison data';\n    const average = samePOSCounts.reduce((sum, count) => sum + count, 0) / samePOSCounts.length;\n    const ratio = morphemeCount / average;\n    if (ratio >= 1.5) return 'Very High';\n    if (ratio >= 1.2) return 'High';\n    if (ratio >= 0.8) return 'Average';\n    if (ratio >= 0.6) return 'Low';\n    return 'Very Low';\n  };\n\n  // Helper function to count morphemes\n  const countMorphemes = (morphemes) => {\n    if (!morphemes || typeof morphemes !== 'string' || morphemes.trim() === '') return 0;\n    return morphemes.split('-').filter(part => part.trim().length > 0).length;\n  };\n\n  const createTranscriptionVariants = (georgianWord) => {\n    if (!georgianWord || typeof georgianWord !== 'string') return [];\n    let variants = new Set();\n    let basicLatin = '';\n    for (let char of georgianWord.toLowerCase()) { basicLatin += georgianToLatin[char] || char; }\n    variants.add(basicLatin);\n    let variant1 = basicLatin.replace(/k/g, \"k'\").replace(/t/g, \"t'\").replace(/p/g, \"p'\").replace(/q/g, \"q'\");\n    variants.add(variant1);\n    let variant2 = basicLatin.replace(/k'/g, \"k\").replace(/t'/g, \"t\").replace(/p'/g, \"p\").replace(/q'/g, \"q\");\n    variants.add(variant2);\n    variants.add(basicLatin.replace(/c/g, 'ts')); variants.add(basicLatin.replace(/c/g, \"ts'\"));\n    variants.add(basicLatin.replace(/ch/g, 'c')); variants.add(basicLatin.replace(/ch/g, \"ch'\"));\n    return Array.from(variants).filter(v => v.length > 0);\n  };\n\n  const [userCSV, setUserCSV] = useState('');\n  const [csvData, setCsvData] = useState([]);\n  const [parseProgress, setParseProgress] = useState(0);\n  const [batchSize, setBatchSize] = useState(500);\n  const [currentBatch, setCurrentBatch] = useState(1);\n  const [processingBatch, setProcessingBatch] = useState(false);\n  const [matchedResults, setMatchedResults] = useState([]);\n  const [matchStats, setMatchStats] = useState({ total: 0, matched: 0, unmatched: 0, byPOS: {} });\n  const [showUnmatched, setShowUnmatched] = useState(false);\n  const [showMorphAnalysis, setShowMorphAnalysis] = useState(true); // Added for the new columns\n  const resultsRef = useRef(null);\n\n  const detectDelimiter = (data) => {\n    const firstLine = data.split('\\n')[0];\n    const tabCount = (firstLine.match(/\\t/g) || []).length;\n    const commaCount = (firstLine.match(/,/g) || []).length;\n    return tabCount > commaCount ? '\\t' : ',';\n  };\n\n  const loadReferenceData = () => {\n    if (!referenceCSV.trim()) { setError('Please paste your reference lemma data first.'); return; }\n    try {\n      setLoading(true); setError('');\n      const delimiter = detectDelimiter(referenceCSV);\n      const fileType = delimiter === '\\t' ? 'TSV' : 'CSV';\n      Papa.parse(referenceCSV, {\n        header: true, skipEmptyLines: true, dynamicTyping: true, delimiter: delimiter,\n        complete: (result) => {\n          if (result.data.length > 0) {\n            const firstRow = result.data[0]; const headers = Object.keys(firstRow);\n            const hasNewFormat = headers.some(h => h.toLowerCase() === 'word') && headers.some(h => h.toLowerCase() === 'morphemes');\n            if (!hasNewFormat) { setError(`${fileType} must have at least \"Word\" and \"Morphemes\" columns.`); setLoading(false); return; }\n            setReferenceData(result.data);\n            const wordIndex = {};\n            result.data.forEach((row, rowIdx) => {\n              const wordKey = headers.find(h => h.toLowerCase() === 'word');\n              if (wordKey && row[wordKey]) {\n                const word = row[wordKey].toString().toLowerCase().trim();\n                if (word) { if (!wordIndex[word]) wordIndex[word] = []; wordIndex[word].push(rowIdx); }\n              }\n            });\n            setIndexedData({ exact: wordIndex }); setReferenceLoaded(true); setLoading(false);\n            setError(`✓ ${fileType} data loaded successfully with ${result.data.length} entries`);\n            setTimeout(() => setError(''), 3000);\n          } else { setError('Reference data appears to be empty.'); setLoading(false); }\n        },\n        error: (error) => { setError('Error parsing reference data: ' + error.message); setLoading(false); }\n      });\n    } catch (err) { setError('Failed to process reference data: ' + err.message); setLoading(false); }\n  };\n\n  const parseUserCSV = () => {\n    if (!userCSV.trim()) return;\n    try {\n      Papa.parse(userCSV, {\n        header: true, skipEmptyLines: true, dynamicTyping: true,\n        complete: (result) => {\n          if (result.data.length > 0) {\n            const firstRow = result.data[0];\n            if (!('Word' in firstRow) && !('word' in firstRow)) { setError('CSV must have a \"Word\" column.'); return; }\n            const normalizedData = result.data.map(row => {\n              const normalizedRow = {};\n              Object.keys(row).forEach(key => {\n                const lowerKey = key.toLowerCase();\n                if (lowerKey === 'word') normalizedRow.Word = row[key];\n                else if (lowerKey === 'freq' || lowerKey === 'frequency') normalizedRow.Freq = row[key];\n                else normalizedRow[key] = row[key];\n              });\n              return normalizedRow;\n            });\n            setCsvData(normalizedData); setCurrentBatch(1); setMatchedResults([]);\n            setMatchStats({ total: normalizedData.length, matched: 0, unmatched: 0, byPOS: {} });\n            setParseProgress(0);\n          } else { setError('CSV appears to be empty.'); }\n        },\n        error: (error) => { setError('Error parsing your CSV: ' + error.message); }\n      });\n    } catch (err) { setError('Failed to process CSV: ' + err.message); }\n  };\n\n  const findMatches = (word) => {\n    if (!word || typeof word !== 'string') return [];\n    const searchWord = word.toLowerCase().trim();\n    let matches = [];\n    if (indexedData.exact && indexedData.exact[searchWord]) { matches = indexedData.exact[searchWord].map(idx => referenceData[idx]); }\n    if (matches.length === 0 && /[\\u10A0-\\u10FF]/.test(searchWord)) {\n      const variants = createTranscriptionVariants(searchWord);\n      for (const variant of variants) {\n        if (indexedData.exact && indexedData.exact[variant]) {\n          const variantMatches = indexedData.exact[variant].map(idx => ({ ...referenceData[idx], transcriptionVariant: variant }));\n          matches.push(...variantMatches);\n        }\n      }\n    }\n    return matches.filter((match, index, self) => index === self.findIndex(m => m.Lemma === match.Lemma && m.Morphemes === match.Morphemes));\n  };\n\n  const processBatch = () => {\n    if (csvData.length === 0) return;\n    setProcessingBatch(true);\n    const startIdx = (currentBatch - 1) * batchSize;\n    const endIdx = Math.min(startIdx + batchSize, csvData.length);\n    const currentItems = csvData.slice(startIdx, endIdx);\n    setTimeout(() => {\n      const batchResults = [];\n      const newMatchStats = { ...matchStats };\n      currentItems.forEach((item, idx) => {\n        const word = item.Word || ''; const frequency = item.Freq || 0;\n        const matches = findMatches(word);\n        if (matches.length > 0) {\n          newMatchStats.matched += 1;\n          matches.forEach(match => { const pos = match.POS || 'Unknown'; newMatchStats.byPOS[pos] = (newMatchStats.byPOS[pos] || 0) + 1; });\n        } else { newMatchStats.unmatched += 1; }\n        batchResults.push({ word, frequency, matches, originalIndex: startIdx + idx });\n        setParseProgress(Math.round(((startIdx + idx + 1) / csvData.length) * 100));\n      });\n      setMatchedResults(prev => [...prev, ...batchResults]);\n      setMatchStats(newMatchStats);\n      setProcessingBatch(false);\n      if (resultsRef.current) { resultsRef.current.scrollIntoView({ behavior: 'smooth' }); }\n    }, 100);\n  };\n\n  const processNextBatch = () => { if (currentBatch * batchSize < csvData.length) { setCurrentBatch(prev => prev + 1); } };\n\n  const resetResults = () => { setCsvData([]); setMatchedResults([]); setParseProgress(0); setCurrentBatch(1); setMatchStats({ total: 0, matched: 0, unmatched: 0, byPOS: {} }); };\n\n  const copyResultsToClipboard = () => {\n    if (matchedResults.length === 0) return;\n    const headers = showMorphAnalysis ? \"Word\\tFrequency\\tLemma\\tPOS\\tGloss\\tMorphemes\\tMorpheme_Count\\tMorphological_Structure\\tMorphological_Analysis\\tComplexity_Level\\n\" : \"Word\\tFrequency\\tLemma\\tPOS\\tGloss\\tMorphemes\\tMorpheme_Count\\n\";\n    const rows = matchedResults.flatMap(result => {\n      if (result.matches.length === 0) {\n        return showUnmatched ? (showMorphAnalysis ? [`${result.word}\\t${result.frequency}\\t\\t\\t\\t\\t0\\t\\t\\t`] : [`${result.word}\\t${result.frequency}\\t\\t\\t\\t\\t0`]) : [];\n      }\n      return result.matches.map(match => {\n        const morphCount = countMorphemes(match.Morphemes);\n        const morphAnalysis = analyzeMorphemeStructure(match.Morphemes, match.POS);\n        const complexityLevel = calculateRelativeComplexity(morphCount, match.POS, matchedResults);\n        return showMorphAnalysis ? `${result.word}\\t${result.frequency}\\t${match.Lemma || ''}\\t${match.POS || ''}\\t${match.Gloss || ''}\\t${match.Morphemes || ''}\\t${morphCount}\\t${morphAnalysis.structure}\\t${morphAnalysis.analysis}\\t${complexityLevel}` : `${result.word}\\t${result.frequency}\\t${match.Lemma || ''}\\t${match.POS || ''}\\t${match.Gloss || ''}\\t${match.Morphemes || ''}\\t${morphCount}`;\n      });\n    }).join('\\n');\n    navigator.clipboard.writeText(headers + rows).then(() => { setError('Results copied to clipboard successfully!'); setTimeout(() => setError(''), 3000); }).catch(() => { setError('Failed to copy results.'); setTimeout(() => setError(''), 3000); });\n  };\n\n  useEffect(() => { if (csvData.length > 0 && !processingBatch) { processBatch(); } }, [currentBatch, csvData]);\n\n  const hasMoreBatches = csvData.length > 0 && currentBatch * batchSize < csvData.length;\n  const processedCount = Math.min(currentBatch * batchSize, csvData.length);\n  const chartData = Object.entries(matchStats.byPOS).map(([pos, count]) => ({ pos, count, percentage: matchStats.matched > 0 ? Math.round((count / matchStats.matched) * 100) : 0 })).sort((a, b) => b.count - a.count);\n\n  return (\n    <div className=\"p-4 max-w-7xl mx-auto\">\n      <h1 className=\"text-2xl font-bold mb-4\">Georgian-Latin Lemma Matcher</h1>\n      {error && (<div className={`border px-4 py-3 rounded mb-4 ${error.includes('✓') ? 'bg-green-100 border-green-400 text-green-700' : 'bg-red-100 border-red-400 text-red-700'}`}><p>{error}</p><button className=\"float-right font-bold\" onClick={() => setError('')}>×</button></div>)}\n      {loading ? (<div className=\"text-center py-8\"><div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mb-2\"></div><p>Processing data...</p></div>) : (\n        <div className=\"space-y-6\">\n          <div className=\"bg-white p-4 rounded shadow\">\n            <h2 className=\"text-xl font-semibold mb-3\">Step 1: Load Reference Lemma Data</h2>\n            <div className=\"mb-3\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Paste your lemmatized reference data (CSV or TSV):</label>\n              <textarea className=\"w-full p-2 border rounded h-32 font-mono text-sm\" value={referenceCSV} onChange={(e) => setReferenceCSV(e.target.value)} placeholder=\"New format: Word[TAB]Frequency[TAB]Lemma[TAB]POS[TAB]Gloss[TAB]Morphemes\nOR\nCSV format: Words (Frequency),Lemma,Total,POS,Gloss\nOR\nTSV format: Word forms[TAB]Lemma[TAB]POS[TAB]Gloss\" disabled={referenceLoaded} />\n            </div>\n            <div className=\"mb-3 text-sm text-gray-600\">\n              <p><strong>Supported formats:</strong></p>\n              <ul className=\"list-disc pl-5 mt-1\">\n                <li><strong>New TSV:</strong> Headers \"Word\", \"Frequency\", \"Lemma\", \"POS\", \"Gloss\", \"Morphemes\"</li>\n                <li><strong>CSV:</strong> Headers \"Words (Frequency)\", \"Lemma\", \"POS\", \"Gloss\"</li>\n                <li><strong>TSV:</strong> Headers \"Word forms\", \"Lemma\", \"POS\", \"Gloss\"</li>\n              </ul>\n            </div>\n            <div className=\"flex gap-3 items-center\">\n              {!referenceLoaded ? (<button className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\" onClick={loadReferenceData} disabled={!referenceCSV.trim() || loading}>Load Reference Data</button>) : (<div className=\"bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm\">✓ Reference data loaded ({referenceData.length} entries)</div>)}\n              {referenceLoaded && (<button className=\"text-blue-600 hover:text-blue-800 text-sm\" onClick={() => { setReferenceLoaded(false); setReferenceData([]); setIndexedData({}); }}>Reset Reference Data</button>)}\n            </div>\n          </div>\n\n          <div className={`bg-white p-4 rounded shadow ${!referenceLoaded ? 'opacity-50' : ''}`}>\n            <h2 className=\"text-xl font-semibold mb-3\">Step 2: Input Your Georgian Word List</h2>\n            <div className=\"mb-3\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Paste your CSV data with Georgian words:</label>\n              <textarea className=\"w-full p-2 border rounded h-48 font-mono text-sm\" value={userCSV} onChange={(e) => setUserCSV(e.target.value)} placeholder=\"Freq,Word\n1,ორი\n1,პუმბა\n1,კარაქი\" disabled={!referenceLoaded} />\n            </div>\n            <div className=\"flex flex-wrap gap-3 items-center\">\n              <button className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\" onClick={parseUserCSV} disabled={!referenceLoaded || !userCSV.trim() || processingBatch}>Parse CSV</button>\n              <div className=\"flex items-center\"><label className=\"text-sm font-medium text-gray-700 mr-2\">Batch Size:</label><select className=\"border rounded p-1\" value={batchSize} onChange={(e) => setBatchSize(Number(e.target.value))} disabled={!referenceLoaded}><option value={100}>100</option><option value={250}>250</option><option value={500}>500</option><option value={1000}>1000</option></select></div>\n              {csvData.length > 0 && <span className=\"text-sm text-gray-600\">{processedCount} of {csvData.length} words processed ({Math.round((processedCount / csvData.length) * 100)}%)</span>}\n              {csvData.length > 0 && <button className=\"text-red-600 hover:text-red-800 text-sm\" onClick={resetResults}>Reset</button>}\n            </div>\n            {parseProgress > 0 && parseProgress < 100 && (<div className=\"w-full bg-gray-200 rounded-full h-2.5 mt-4\"><div className=\"bg-blue-600 h-2.5 rounded-full\" style={{ width: `${parseProgress}%` }}></div></div>)}\n          </div>\n\n          {matchedResults.length > 0 && (\n            <div className=\"bg-white p-4 rounded shadow\" ref={resultsRef}>\n              <h2 className=\"text-xl font-semibold mb-3\">Step 3: Matching Results</h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                <div className=\"bg-gray-50 p-3 rounded\"><h3 className=\"font-semibold mb-2\">Summary</h3><ul className=\"space-y-1\"><li>Total Words: <span className=\"font-medium\">{matchStats.total}</span></li><li>Words Processed: <span className=\"font-medium\">{processedCount}</span></li><li>Matched Words: <span className=\"font-medium text-green-600\">{matchStats.matched}</span> ({processedCount > 0 ? Math.round((matchStats.matched / processedCount) * 100) : 0}%)</li><li>Unmatched Words: <span className=\"font-medium text-red-600\">{matchStats.unmatched}</span> ({processedCount > 0 ? Math.round((matchStats.unmatched / processedCount) * 100) : 0}%)</li></ul></div>\n                {chartData.length > 0 && (<div className=\"bg-gray-50 p-3 rounded h-64\"><h3 className=\"font-semibold mb-2\">POS Distribution</h3><ResponsiveContainer width=\"100%\" height=\"90%\"><BarChart data={chartData.slice(0, 10)} margin={{ top: 5, right: 20, left: 10, bottom: 5 }}><CartesianGrid strokeDasharray=\"3 3\" /><XAxis dataKey=\"pos\" /><YAxis /><Tooltip formatter={(value, name, props) => [`${value} (${props.payload.percentage}%)`, 'Count']} /><Bar dataKey=\"count\" fill=\"#3b82f6\" /></BarChart></ResponsiveContainer></div>)}\n              </div>\n              <div className=\"flex flex-wrap gap-3 mb-4\">\n                {hasMoreBatches && (<button className=\"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded\" onClick={processNextBatch} disabled={processingBatch}>{processingBatch ? 'Processing...' : `Process Next Batch (${Math.min(batchSize, csvData.length - processedCount)} words)`}</button>)}\n                <button className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\" onClick={copyResultsToClipboard} disabled={matchedResults.length === 0}>Copy Results to Clipboard</button>\n                <div className=\"flex items-center\"><input type=\"checkbox\" id=\"showMorphAnalysis\" checked={showMorphAnalysis} onChange={(e) => setShowMorphAnalysis(e.target.checked)} className=\"mr-2\" /><label htmlFor=\"showMorphAnalysis\" className=\"text-sm\">Show morphological analysis</label></div>\n                <div className=\"flex items-center ml-auto\"><input type=\"checkbox\" id=\"showUnmatched\" checked={showUnmatched} onChange={(e) => setShowUnmatched(e.target.checked)} className=\"mr-2\" /><label htmlFor=\"showUnmatched\" className=\"text-sm\">Show unmatched words</label></div>\n              </div>\n\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full border-collapse border border-gray-300\">\n                  <thead><tr className=\"bg-gray-100\">\n                    <th className=\"border border-gray-300 px-4 py-2 text-left\">Word</th>\n                    <th className=\"border border-gray-300 px-4 py-2 text-left\">Frequency</th>\n                    <th className=\"border border-gray-300 px-4 py-2 text-left\">Lemma</th>\n                    <th className=\"border border-gray-300 px-4 py-2 text-left\">POS</th>\n                    <th className=\"border border-gray-300 px-4 py-2 text-left\">Gloss</th>\n                    <th className=\"border border-gray-300 px-4 py-2 text-left\">Morphemes</th>\n                    <th className=\"border border-gray-300 px-4 py-2 text-left\">Morpheme Count</th>\n                    {showMorphAnalysis && (<><th className=\"border border-gray-300 px-4 py-2 text-left\">Morphological Structure</th><th className=\"border border-gray-300 px-4 py-2 text-left\">Morphological Analysis</th><th className=\"border border-gray-300 px-4 py-2 text-left\">Complexity Level</th></>)}\n                  </tr></thead>\n                  <tbody>{matchedResults.map((result) => {\n                    if (result.matches.length === 0) {\n                      if (!showUnmatched) return null;\n                      return (<tr key={`unmatched-${result.originalIndex}`} className=\"bg-red-50\"><td className=\"border border-gray-300 px-4 py-2\">{result.word}</td><td className=\"border border-gray-300 px-4 py-2\">{result.frequency}</td><td className=\"border border-gray-300 px-4 py-2 text-red-500\" colSpan={showMorphAnalysis ? 8 : 5}>Not found</td></tr>);\n                    }\n                    return result.matches.map((match, matchIdx) => {\n                      const morphCount = countMorphemes(match.Morphemes);\n                      const morphAnalysis = analyzeMorphemeStructure(match.Morphemes, match.POS);\n                      const complexityLevel = calculateRelativeComplexity(morphCount, match.POS, matchedResults);\n                      return (\n                        <tr key={`match-${result.originalIndex}-${matchIdx}`} className={matchIdx > 0 ? \"bg-blue-50\" : \"\"}>\n                          <td className=\"border border-gray-300 px-4 py-2\">{matchIdx === 0 ? result.word : \"\"}</td>\n                          <td className=\"border border-gray-300 px-4 py-2\">{matchIdx === 0 ? result.frequency : \"\"}</td>\n                          <td className=\"border border-gray-300 px-4 py-2\">{match.Lemma}</td>\n                          <td className=\"border border-gray-300 px-4 py-2\">{match.POS}</td>\n                          <td className=\"border border-gray-300 px-4 py-2\">{match.Gloss}</td>\n                          <td className=\"border border-gray-300 px-4 py-2 font-mono text-sm\">{match.Morphemes}</td>\n                          <td className=\"border border-gray-300 px-4 py-2 text-center font-medium\">{morphCount}</td>\n                          {showMorphAnalysis && (<>\n                            <td className=\"border border-gray-300 px-4 py-2 font-mono text-xs\">{morphAnalysis.structure}</td>\n                            <td className=\"border border-gray-300 px-4 py-2 text-xs\">{morphAnalysis.analysis}</td>\n                            <td className=\"border border-gray-300 px-4 py-2 text-center text-sm\">\n                              <span className={`px-2 py-1 rounded text-xs ${\n                                complexityLevel === 'Very High' ? 'bg-red-100 text-red-800' :\n                                complexityLevel === 'High' ? 'bg-orange-100 text-orange-800' :\n                                complexityLevel === 'Average' ? 'bg-yellow-100 text-yellow-800' :\n                                complexityLevel === 'Low' ? 'bg-green-100 text-green-800' :\n                                complexityLevel === 'Very Low' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'\n                              }`}>{complexityLevel}</span>\n                            </td>\n                          </>)}\n                        </tr>\n                      );\n                    });\n                  })}</tbody>\n                </table>\n              </div>\n              {hasMoreBatches && (<div className=\"mt-4 text-center\"><button className=\"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded\" onClick={processNextBatch} disabled={processingBatch}>{processingBatch ? 'Processing...' : `Process Next Batch (${Math.min(batchSize, csvData.length - processedCount)} words)`}</button></div>)}\n            </div>\n          )}\n          <div className=\"bg-blue-50 p-4 rounded\"><h3 className=\"font-semibold mb-2\">Instructions</h3><ol className=\"list-decimal pl-5 space-y-1\"><li><strong>Step 1:</strong> Paste your lemmatized reference data (CSV or TSV format) and click \"Load Reference Data\"</li><li><strong>Step 2:</strong> Paste your Georgian word list CSV and click \"Parse CSV\"</li><li><strong>Step 3:</strong> Process words in batches and review matches</li><li>Use \"Copy Results\" to export all matches to clipboard</li></ol><p className=\"mt-2 text-sm text-gray-600\">This tool supports both exact matching and Georgian-to-Latin transcription matching with multiple variant patterns. It now handles CSV, TSV, and the new morpheme-enhanced TSV format with columns: Word, Frequency, Lemma, POS, Gloss, Morphemes.</p></div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}