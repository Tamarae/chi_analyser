{"ast":null,"code":"var _jsxFileName = \"/Users/tamarkalkhitashvili/Documents/chi_analyser/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Papa from 'papaparse';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Reference data state\n  const [referenceData, setReferenceData] = useState([]);\n  const [indexedData, setIndexedData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [referenceLoaded, setReferenceLoaded] = useState(false);\n  const [referenceCSV, setReferenceCSV] = useState('');\n\n  // Georgian to Latin transcription mapping\n  const georgianToLatin = {\n    'ა': 'a',\n    'ბ': 'b',\n    'გ': 'g',\n    'დ': 'd',\n    'ე': 'e',\n    'ვ': 'v',\n    'ზ': 'z',\n    'თ': 't',\n    'ი': 'i',\n    'კ': 'k',\n    'ლ': 'l',\n    'მ': 'm',\n    'ნ': 'n',\n    'ო': 'o',\n    'პ': 'p',\n    'ჟ': 'zh',\n    'რ': 'r',\n    'ს': 's',\n    'ტ': 't',\n    'უ': 'u',\n    'ფ': 'f',\n    'ქ': 'k',\n    'ღ': 'gh',\n    'ყ': 'q',\n    'შ': 'sh',\n    'ჩ': 'ch',\n    'ც': 'c',\n    'ძ': 'dz',\n    'წ': 'c',\n    'ჭ': 'ch',\n    'ხ': 'x',\n    'ჯ': 'j',\n    'ჰ': 'h'\n  };\n\n  // Create variations for irregular transcription\n  const createTranscriptionVariants = georgianWord => {\n    if (!georgianWord || typeof georgianWord !== 'string') return [];\n    let variants = new Set();\n\n    // Basic transcription\n    let basicLatin = '';\n    for (let char of georgianWord.toLowerCase()) {\n      basicLatin += georgianToLatin[char] || char;\n    }\n    variants.add(basicLatin);\n\n    // Common variation patterns\n    let variant1 = basicLatin.replace(/k/g, \"k'\").replace(/t/g, \"t'\").replace(/p/g, \"p'\").replace(/q/g, \"q'\");\n    variants.add(variant1);\n    let variant2 = basicLatin.replace(/k'/g, \"k\").replace(/t'/g, \"t\").replace(/p'/g, \"p\").replace(/q'/g, \"q\");\n    variants.add(variant2);\n\n    // Character variations\n    variants.add(basicLatin.replace(/c/g, 'ts'));\n    variants.add(basicLatin.replace(/c/g, \"ts'\"));\n    variants.add(basicLatin.replace(/ch/g, 'c'));\n    variants.add(basicLatin.replace(/ch/g, \"ch'\"));\n    return Array.from(variants).filter(v => v.length > 0);\n  };\n\n  // Input state\n  const [userCSV, setUserCSV] = useState('');\n  const [csvData, setCsvData] = useState([]);\n  const [parseProgress, setParseProgress] = useState(0);\n  const [batchSize, setBatchSize] = useState(500);\n  const [currentBatch, setCurrentBatch] = useState(1);\n  const [processingBatch, setProcessingBatch] = useState(false);\n\n  // Results state\n  const [matchedResults, setMatchedResults] = useState([]);\n  const [matchStats, setMatchStats] = useState({\n    total: 0,\n    matched: 0,\n    unmatched: 0,\n    byPOS: {}\n  });\n  const [showUnmatched, setShowUnmatched] = useState(false);\n\n  // Refs\n  const resultsRef = useRef(null);\n\n  // Detect if data is TSV or CSV\n  const detectDelimiter = data => {\n    const firstLine = data.split('\\n')[0];\n    const tabCount = (firstLine.match(/\\t/g) || []).length;\n    const commaCount = (firstLine.match(/,/g) || []).length;\n    return tabCount > commaCount ? '\\t' : ',';\n  };\n\n  // Load reference data\n  const loadReferenceData = () => {\n    if (!referenceCSV.trim()) {\n      setError('Please paste your reference lemma data first.');\n      return;\n    }\n    try {\n      setLoading(true);\n      setError('');\n      const delimiter = detectDelimiter(referenceCSV);\n      const fileType = delimiter === '\\t' ? 'TSV' : 'CSV';\n      Papa.parse(referenceCSV, {\n        header: true,\n        skipEmptyLines: true,\n        dynamicTyping: true,\n        delimiter: delimiter,\n        complete: result => {\n          if (result.data.length > 0) {\n            const firstRow = result.data[0];\n            const headers = Object.keys(firstRow);\n            console.log('Headers detected:', headers);\n\n            // Check for new format with morphemes (Word, Frequency, Lemma, POS, Gloss, Morphemes)\n            const hasNewFormat = headers.some(h => h.toLowerCase() === 'word') && headers.some(h => h.toLowerCase() === 'frequency') && headers.some(h => h.toLowerCase() === 'lemma') && headers.some(h => h.toLowerCase() === 'pos') && headers.some(h => h.toLowerCase() === 'gloss') && headers.some(h => h.toLowerCase() === 'morphemes');\n\n            // Check for TSV format (Word forms, Lemma, POS, Gloss)\n            const hasTSVFormat = headers.some(h => h.toLowerCase().includes('word forms')) && headers.some(h => h.toLowerCase() === 'lemma') && headers.some(h => h.toLowerCase() === 'pos') && headers.some(h => h.toLowerCase() === 'gloss');\n\n            // Check for original CSV format (Words (Frequency), Lemma)\n            const hasCSVFormat = headers.some(h => h.toLowerCase().includes('words (frequency)')) && headers.some(h => h.toLowerCase() === 'lemma');\n            if (!hasNewFormat && !hasTSVFormat && !hasCSVFormat) {\n              setError(`${fileType} must have one of these formats:\\n- New format: \"Word\", \"Frequency\", \"Lemma\", \"POS\", \"Gloss\", \"Morphemes\" columns\\n- TSV format: \"Word forms\", \"Lemma\", \"POS\", \"Gloss\" columns\\n- CSV format: \"Words (Frequency)\", \"Lemma\" columns`);\n              setLoading(false);\n              return;\n            }\n            setReferenceData(result.data);\n            const wordIndex = {};\n            result.data.forEach((row, rowIdx) => {\n              let wordsToIndex = [];\n              if (hasNewFormat) {\n                // Handle new format with Word column\n                const wordKey = headers.find(h => h.toLowerCase() === 'word');\n                if (wordKey && row[wordKey]) {\n                  const word = row[wordKey].toString().toLowerCase().trim();\n                  if (word) {\n                    wordsToIndex.push(word);\n                  }\n                }\n              } else if (hasTSVFormat) {\n                // Handle TSV format - find the \"Word forms\" column (case insensitive)\n                const wordFormsKey = headers.find(h => h.toLowerCase().includes('word forms'));\n                if (wordFormsKey && row[wordFormsKey]) {\n                  const wordString = row[wordFormsKey].toString().toLowerCase();\n                  // Split by comma or space, depending on the format\n                  wordsToIndex = wordString.split(/[,\\s]+/).filter(word => word.trim().length > 0);\n                }\n              } else if (hasCSVFormat) {\n                // Handle original CSV format\n                const wordFreqKey = headers.find(h => h.toLowerCase().includes('words (frequency)'));\n                if (wordFreqKey && row[wordFreqKey]) {\n                  const wordString = row[wordFreqKey].toString().toLowerCase();\n                  const wordEntries = wordString.split(',');\n                  for (const entry of wordEntries) {\n                    const trimmed = entry.trim();\n                    const match = trimmed.match(/^([^\\(]+)(?:\\s*\\(\\d+\\))?/);\n                    if (match) {\n                      wordsToIndex.push(match[1].trim());\n                    }\n                  }\n                }\n              }\n\n              // Index all words found\n              wordsToIndex.forEach(word => {\n                const cleanWord = word.toLowerCase().trim();\n                if (cleanWord) {\n                  if (!wordIndex[cleanWord]) {\n                    wordIndex[cleanWord] = [];\n                  }\n                  wordIndex[cleanWord].push(rowIdx);\n                }\n              });\n            });\n            setIndexedData({\n              exact: wordIndex\n            });\n            setReferenceLoaded(true);\n            setLoading(false);\n            setError(`✓ ${fileType} data loaded successfully with ${result.data.length} entries`);\n            setTimeout(() => setError(''), 3000);\n          } else {\n            setError('Reference data appears to be empty.');\n            setLoading(false);\n          }\n        },\n        error: error => {\n          setError('Error parsing reference data: ' + error.message);\n          setLoading(false);\n        }\n      });\n    } catch (err) {\n      setError('Failed to process reference data: ' + err.message);\n      setLoading(false);\n    }\n  };\n\n  // Parse user CSV\n  const parseUserCSV = () => {\n    if (!userCSV.trim()) return;\n    try {\n      Papa.parse(userCSV, {\n        header: true,\n        skipEmptyLines: true,\n        dynamicTyping: true,\n        complete: result => {\n          if (result.data.length > 0) {\n            const firstRow = result.data[0];\n            if (!('Word' in firstRow) && !('word' in firstRow)) {\n              setError('CSV must have a \"Word\" column.');\n              return;\n            }\n            const normalizedData = result.data.map(row => {\n              const normalizedRow = {};\n              Object.keys(row).forEach(key => {\n                const lowerKey = key.toLowerCase();\n                if (lowerKey === 'word') {\n                  normalizedRow.Word = row[key];\n                } else if (lowerKey === 'freq' || lowerKey === 'frequency') {\n                  normalizedRow.Freq = row[key];\n                } else {\n                  normalizedRow[key] = row[key];\n                }\n              });\n              return normalizedRow;\n            });\n            setCsvData(normalizedData);\n            setCurrentBatch(1);\n            setMatchedResults([]);\n            setMatchStats({\n              total: normalizedData.length,\n              matched: 0,\n              unmatched: 0,\n              byPOS: {}\n            });\n            setParseProgress(0);\n          } else {\n            setError('CSV appears to be empty.');\n          }\n        },\n        error: error => {\n          setError('Error parsing your CSV: ' + error.message);\n        }\n      });\n    } catch (err) {\n      setError('Failed to process CSV: ' + err.message);\n    }\n  };\n\n  // Find matches\n  const findMatches = word => {\n    if (!word || typeof word !== 'string') return [];\n    const searchWord = word.toLowerCase().trim();\n    let matches = [];\n\n    // Try exact match first\n    if (indexedData.exact && indexedData.exact[searchWord]) {\n      matches = indexedData.exact[searchWord].map(idx => referenceData[idx]);\n    }\n\n    // Try transcription variants if Georgian characters detected\n    if (matches.length === 0 && /[\\u10A0-\\u10FF]/.test(searchWord)) {\n      const variants = createTranscriptionVariants(searchWord);\n      for (const variant of variants) {\n        if (indexedData.exact && indexedData.exact[variant]) {\n          const variantMatches = indexedData.exact[variant].map(idx => {\n            const match = {\n              ...referenceData[idx]\n            };\n            match.transcriptionVariant = variant;\n            return match;\n          });\n          matches.push(...variantMatches);\n        }\n      }\n    }\n\n    // Remove duplicates\n    const uniqueMatches = matches.filter((match, index, self) => index === self.findIndex(m => m.Lemma === match.Lemma));\n    return uniqueMatches;\n  };\n\n  // Process batch\n  const processBatch = () => {\n    if (csvData.length === 0) return;\n    setProcessingBatch(true);\n    const startIdx = (currentBatch - 1) * batchSize;\n    const endIdx = Math.min(startIdx + batchSize, csvData.length);\n    const currentItems = csvData.slice(startIdx, endIdx);\n    setTimeout(() => {\n      const batchResults = [];\n      const newMatchStats = {\n        ...matchStats\n      };\n      currentItems.forEach((item, idx) => {\n        const word = item.Word || '';\n        const frequency = item.Freq || 0;\n        const matches = findMatches(word);\n        if (matches.length > 0) {\n          newMatchStats.matched += 1;\n          matches.forEach(match => {\n            const pos = match.POS || 'Unknown';\n            newMatchStats.byPOS[pos] = (newMatchStats.byPOS[pos] || 0) + 1;\n          });\n        } else {\n          newMatchStats.unmatched += 1;\n        }\n        batchResults.push({\n          word,\n          frequency,\n          matches,\n          originalIndex: startIdx + idx\n        });\n        setParseProgress(Math.round((startIdx + idx + 1) / csvData.length * 100));\n      });\n      setMatchedResults(prev => [...prev, ...batchResults]);\n      setMatchStats(newMatchStats);\n      setProcessingBatch(false);\n      if (resultsRef.current) {\n        resultsRef.current.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    }, 100);\n  };\n\n  // Process next batch\n  const processNextBatch = () => {\n    if (currentBatch * batchSize < csvData.length) {\n      setCurrentBatch(prev => prev + 1);\n    }\n  };\n\n  // Reset results\n  const resetResults = () => {\n    setCsvData([]);\n    setMatchedResults([]);\n    setParseProgress(0);\n    setCurrentBatch(1);\n    setMatchStats({\n      total: 0,\n      matched: 0,\n      unmatched: 0,\n      byPOS: {}\n    });\n  };\n\n  // Copy to clipboard\n  const copyResultsToClipboard = () => {\n    if (matchedResults.length === 0) return;\n    const headers = \"Word\\tFrequency\\tLemma\\tPOS\\tGloss\\tMorphemes\\tTranscription_Variant\\n\";\n    const rows = matchedResults.flatMap(result => {\n      if (result.matches.length === 0) {\n        return showUnmatched ? [`${result.word}\\t${result.frequency}\\t\\t\\t\\t\\t`] : [];\n      }\n      return result.matches.map(match => `${result.word}\\t${result.frequency}\\t${match.Lemma || ''}\\t${match.POS || ''}\\t${match.Gloss || ''}\\t${match.Morphemes || ''}\\t${match.transcriptionVariant || 'exact'}`);\n    }).join('\\n');\n    navigator.clipboard.writeText(headers + rows).then(() => {\n      setError('Results copied to clipboard successfully!');\n      setTimeout(() => setError(''), 3000);\n    }).catch(() => {\n      setError('Failed to copy results.');\n      setTimeout(() => setError(''), 3000);\n    });\n  };\n\n  // Effects\n  useEffect(() => {\n    if (csvData.length > 0 && !processingBatch) {\n      processBatch();\n    }\n  }, [currentBatch, csvData]);\n\n  // Calculations\n  const hasMoreBatches = csvData.length > 0 && currentBatch * batchSize < csvData.length;\n  const processedCount = Math.min(currentBatch * batchSize, csvData.length);\n  const chartData = Object.entries(matchStats.byPOS).map(([pos, count]) => ({\n    pos,\n    count,\n    percentage: Math.round(count / matchStats.matched * 100)\n  })).sort((a, b) => b.count - a.count);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 max-w-7xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Georgian-Latin Lemma Matcher\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `border px-4 py-3 rounded mb-4 ${error.includes('✓') ? 'bg-green-100 border-green-400 text-green-700' : 'bg-red-100 border-red-400 text-red-700'}`,\n      children: [error, /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"float-right font-bold\",\n        onClick: () => setError(''),\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 9\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center py-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mb-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Processing data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded shadow\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-3\",\n          children: \"Step 1: Load Reference Lemma Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700 mb-1\",\n            children: \"Paste your lemmatized reference data (CSV or TSV):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"w-full p-2 border rounded h-32 font-mono text-sm\",\n            value: referenceCSV,\n            onChange: e => setReferenceCSV(e.target.value),\n            placeholder: \"New format: Word[TAB]Frequency[TAB]Lemma[TAB]POS[TAB]Gloss[TAB]Morphemes\\nOR\\nCSV format: Words (Frequency),Lemma,Total,POS,Gloss\\nOR\\nTSV format: Word forms[TAB]Lemma[TAB]POS[TAB]Gloss\",\n            disabled: referenceLoaded\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3 text-sm text-gray-600\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Supported formats:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 18\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"list-disc pl-5 mt-1\",\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"New TSV:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 455,\n                columnNumber: 21\n              }, this), \" Headers \\\"Word\\\", \\\"Frequency\\\", \\\"Lemma\\\", \\\"POS\\\", \\\"Gloss\\\", \\\"Morphemes\\\"\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"CSV:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 456,\n                columnNumber: 21\n              }, this), \" Headers \\\"Words (Frequency)\\\", \\\"Lemma\\\", \\\"POS\\\", \\\"Gloss\\\"\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"TSV:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 457,\n                columnNumber: 21\n              }, this), \" Headers \\\"Word forms\\\", \\\"Lemma\\\", \\\"POS\\\", \\\"Gloss\\\"\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex gap-3 items-center\",\n          children: [!referenceLoaded ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\",\n            onClick: loadReferenceData,\n            disabled: !referenceCSV.trim() || loading,\n            children: \"Load Reference Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm\",\n            children: [\"\\u2713 Reference data loaded (\", referenceData.length, \" entries)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 17\n          }, this), referenceLoaded && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"text-blue-600 hover:text-blue-800 text-sm\",\n            onClick: () => {\n              setReferenceLoaded(false);\n              setReferenceData([]);\n              setIndexedData({});\n            },\n            children: \"Reset Reference Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `bg-white p-4 rounded shadow ${!referenceLoaded ? 'opacity-50' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-3\",\n          children: \"Step 2: Input Your Georgian Word List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700 mb-1\",\n            children: \"Paste your CSV data with Georgian words:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"w-full p-2 border rounded h-48 font-mono text-sm\",\n            value: userCSV,\n            onChange: e => setUserCSV(e.target.value),\n            placeholder: \"Freq,Word\\n1,\\u10DD\\u10E0\\u10D8\\n1,\\u10DE\\u10E3\\u10DB\\u10D1\\u10D0\\n1,\\u10D9\\u10D0\\u10E0\\u10D0\\u10E5\\u10D8\",\n            disabled: !referenceLoaded\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-wrap gap-3 items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\",\n            onClick: parseUserCSV,\n            disabled: !referenceLoaded || !userCSV.trim() || processingBatch,\n            children: \"Parse CSV\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"text-sm font-medium text-gray-700 mr-2\",\n              children: \"Batch Size:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 513,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"border rounded p-1\",\n              value: batchSize,\n              onChange: e => setBatchSize(Number(e.target.value)),\n              disabled: !referenceLoaded,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: 100,\n                children: \"100 words\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 520,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: 250,\n                children: \"250 words\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 521,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: 500,\n                children: \"500 words\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 522,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: 1000,\n                children: \"1000 words\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 523,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 514,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 15\n          }, this), csvData.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm text-gray-600\",\n            children: [processedCount, \" of \", csvData.length, \" words processed (\", Math.round(processedCount / csvData.length * 100), \"%)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 17\n          }, this), csvData.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"text-red-600 hover:text-red-800 text-sm\",\n            onClick: resetResults,\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 13\n        }, this), parseProgress > 0 && parseProgress < 100 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-full bg-gray-200 rounded-full h-2.5 mt-4\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-blue-600 h-2.5 rounded-full\",\n            style: {\n              width: `${parseProgress}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 11\n      }, this), matchedResults.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded shadow\",\n        ref: resultsRef,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-3\",\n          children: \"Step 3: Matching Results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gray-50 p-3 rounded\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"font-semibold mb-2\",\n              children: \"Summary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 551,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"space-y-1\",\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Total Words: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium\",\n                  children: matchStats.total\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 553,\n                  columnNumber: 38\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 553,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Words Processed: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium\",\n                  children: processedCount\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 554,\n                  columnNumber: 42\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 554,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Matched Words: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium text-green-600\",\n                  children: matchStats.matched\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 555,\n                  columnNumber: 40\n                }, this), \" (\", Math.round(matchStats.matched / processedCount * 100), \"%)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 555,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Unmatched Words: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium text-red-600\",\n                  children: matchStats.unmatched\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 556,\n                  columnNumber: 42\n                }, this), \" (\", Math.round(matchStats.unmatched / processedCount * 100), \"%)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 556,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 552,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 550,\n            columnNumber: 17\n          }, this), chartData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gray-50 p-3 rounded h-64\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"font-semibold mb-2\",\n              children: \"POS Distribution\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 562,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n              width: \"100%\",\n              height: \"90%\",\n              children: /*#__PURE__*/_jsxDEV(BarChart, {\n                data: chartData.slice(0, 10),\n                margin: {\n                  top: 5,\n                  right: 20,\n                  left: 10,\n                  bottom: 5\n                },\n                children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                  strokeDasharray: \"3 3\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 565,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                  dataKey: \"pos\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 566,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 567,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                  formatter: (value, name, props) => [`${value} (${props.payload.percentage}%)`, 'Count']\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 568,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Bar, {\n                  dataKey: \"count\",\n                  fill: \"#3b82f6\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 569,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 564,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 563,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 561,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-wrap gap-3 mb-4\",\n          children: [hasMoreBatches && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded\",\n            onClick: processNextBatch,\n            disabled: processingBatch,\n            children: processingBatch ? 'Processing...' : `Process Next Batch (${Math.min(batchSize, csvData.length - processedCount)} words)`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\",\n            onClick: copyResultsToClipboard,\n            disabled: matchedResults.length === 0,\n            children: \"Copy Results to Clipboard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center ml-auto\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: \"showUnmatched\",\n              checked: showUnmatched,\n              onChange: e => setShowUnmatched(e.target.checked),\n              className: \"mr-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 594,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"showUnmatched\",\n              className: \"text-sm\",\n              children: \"Show unmatched words\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 601,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 593,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overflow-x-auto\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"min-w-full border-collapse border border-gray-300\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                className: \"bg-gray-100\",\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"Word\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 609,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"Frequency\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 610,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"Lemma\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 611,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"POS\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 612,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"Gloss\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 613,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"Morphemes\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 614,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"border border-gray-300 px-4 py-2 text-left\",\n                  children: \"Match Type\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 615,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 608,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 607,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: matchedResults.map(result => {\n                if (result.matches.length === 0) {\n                  if (!showUnmatched) return null;\n                  return /*#__PURE__*/_jsxDEV(\"tr\", {\n                    className: \"bg-red-50\",\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2\",\n                      children: result.word\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 624,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2\",\n                      children: result.frequency\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 625,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2 text-red-500\",\n                      children: \"Not found\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 626,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2\",\n                      children: \"-\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 627,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2\",\n                      children: \"-\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 628,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2\",\n                      children: \"-\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 629,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"border border-gray-300 px-4 py-2\",\n                      children: \"-\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 630,\n                      columnNumber: 29\n                    }, this)]\n                  }, `unmatched-${result.originalIndex}`, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 623,\n                    columnNumber: 27\n                  }, this);\n                }\n                return result.matches.map((match, matchIdx) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  className: matchIdx > 0 ? \"bg-blue-50\" : \"\",\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"border border-gray-300 px-4 py-2\",\n                    children: matchIdx === 0 ? result.word : \"\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 637,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"border border-gray-300 px-4 py-2\",\n                    children: matchIdx === 0 ? result.frequency : \"\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 638,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"border border-gray-300 px-4 py-2\",\n                    children: match.Lemma\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 639,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"border border-gray-300 px-4 py-2\",\n                    children: match.POS\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 640,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"border border-gray-300 px-4 py-2\",\n                    children: match.Gloss\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 641,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"border border-gray-300 px-4 py-2 font-mono text-sm\",\n                    children: match.Morphemes\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 642,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"border border-gray-300 px-4 py-2\",\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: match.transcriptionVariant ? \"text-blue-600\" : \"text-green-600\",\n                      children: match.transcriptionVariant ? `Transcribed: ${match.transcriptionVariant}` : 'Exact'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 644,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 643,\n                    columnNumber: 27\n                  }, this)]\n                }, `match-${result.originalIndex}-${matchIdx}`, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 636,\n                  columnNumber: 25\n                }, this));\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 618,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 606,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 15\n        }, this), hasMoreBatches && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4 text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded\",\n            onClick: processNextBatch,\n            disabled: processingBatch,\n            children: processingBatch ? 'Processing...' : `Process Next Batch (${Math.min(batchSize, csvData.length - processedCount)} words)`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 657,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-blue-50 p-4 rounded\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"font-semibold mb-2\",\n          children: \"Instructions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          className: \"list-decimal pl-5 space-y-1\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Step 1:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 673,\n              columnNumber: 19\n            }, this), \" Paste your lemmatized reference data (CSV or TSV format) and click \\\"Load Reference Data\\\"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 673,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Step 2:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 674,\n              columnNumber: 19\n            }, this), \" Paste your Georgian word list CSV and click \\\"Parse CSV\\\"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 674,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Step 3:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 675,\n              columnNumber: 19\n            }, this), \" Process words in batches and review matches\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 675,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Use \\\"Copy Results\\\" to export all matches to clipboard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 676,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mt-2 text-sm text-gray-600\",\n          children: \"This tool supports both exact matching and Georgian-to-Latin transcription matching with multiple variant patterns. It now handles CSV, TSV, and the new morpheme-enhanced TSV format with columns: Word, Frequency, Lemma, POS, Gloss, Morphemes.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 678,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 416,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"j/dbPDrTZ6/vxkgegLGgvMs8Fn4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Papa","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","jsxDEV","_jsxDEV","App","_s","referenceData","setReferenceData","indexedData","setIndexedData","loading","setLoading","error","setError","referenceLoaded","setReferenceLoaded","referenceCSV","setReferenceCSV","georgianToLatin","createTranscriptionVariants","georgianWord","variants","Set","basicLatin","char","toLowerCase","add","variant1","replace","variant2","Array","from","filter","v","length","userCSV","setUserCSV","csvData","setCsvData","parseProgress","setParseProgress","batchSize","setBatchSize","currentBatch","setCurrentBatch","processingBatch","setProcessingBatch","matchedResults","setMatchedResults","matchStats","setMatchStats","total","matched","unmatched","byPOS","showUnmatched","setShowUnmatched","resultsRef","detectDelimiter","data","firstLine","split","tabCount","match","commaCount","loadReferenceData","trim","delimiter","fileType","parse","header","skipEmptyLines","dynamicTyping","complete","result","firstRow","headers","Object","keys","console","log","hasNewFormat","some","h","hasTSVFormat","includes","hasCSVFormat","wordIndex","forEach","row","rowIdx","wordsToIndex","wordKey","find","word","toString","push","wordFormsKey","wordString","wordFreqKey","wordEntries","entry","trimmed","cleanWord","exact","setTimeout","message","err","parseUserCSV","normalizedData","map","normalizedRow","key","lowerKey","Word","Freq","findMatches","searchWord","matches","idx","test","variant","variantMatches","transcriptionVariant","uniqueMatches","index","self","findIndex","m","Lemma","processBatch","startIdx","endIdx","Math","min","currentItems","slice","batchResults","newMatchStats","item","frequency","pos","POS","originalIndex","round","prev","current","scrollIntoView","behavior","processNextBatch","resetResults","copyResultsToClipboard","rows","flatMap","Gloss","Morphemes","join","navigator","clipboard","writeText","then","catch","hasMoreBatches","processedCount","chartData","entries","count","percentage","sort","a","b","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","onChange","e","target","placeholder","disabled","Number","style","width","ref","height","margin","top","right","left","bottom","strokeDasharray","dataKey","formatter","name","props","payload","fill","type","id","checked","htmlFor","matchIdx","_c","$RefreshReg$"],"sources":["/Users/tamarkalkhitashvili/Documents/chi_analyser/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Papa from 'papaparse';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport './App.css';\n\nfunction App() {\n  // Reference data state\n  const [referenceData, setReferenceData] = useState([]);\n  const [indexedData, setIndexedData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [referenceLoaded, setReferenceLoaded] = useState(false);\n  const [referenceCSV, setReferenceCSV] = useState('');\n\n  // Georgian to Latin transcription mapping\n  const georgianToLatin = {\n    'ა': 'a', 'ბ': 'b', 'გ': 'g', 'დ': 'd', 'ე': 'e', 'ვ': 'v', 'ზ': 'z', 'თ': 't',\n    'ი': 'i', 'კ': 'k', 'ლ': 'l', 'მ': 'm', 'ნ': 'n', 'ო': 'o', 'პ': 'p', 'ჟ': 'zh',\n    'რ': 'r', 'ს': 's', 'ტ': 't', 'უ': 'u', 'ფ': 'f', 'ქ': 'k', 'ღ': 'gh', 'ყ': 'q',\n    'შ': 'sh', 'ჩ': 'ch', 'ც': 'c', 'ძ': 'dz', 'წ': 'c', 'ჭ': 'ch', 'ხ': 'x', 'ჯ': 'j', 'ჰ': 'h'\n  };\n\n  // Create variations for irregular transcription\n  const createTranscriptionVariants = (georgianWord) => {\n    if (!georgianWord || typeof georgianWord !== 'string') return [];\n\n    let variants = new Set();\n\n    // Basic transcription\n    let basicLatin = '';\n    for (let char of georgianWord.toLowerCase()) {\n      basicLatin += georgianToLatin[char] || char;\n    }\n    variants.add(basicLatin);\n\n    // Common variation patterns\n    let variant1 = basicLatin\n      .replace(/k/g, \"k'\")\n      .replace(/t/g, \"t'\")\n      .replace(/p/g, \"p'\")\n      .replace(/q/g, \"q'\");\n    variants.add(variant1);\n\n    let variant2 = basicLatin\n      .replace(/k'/g, \"k\")\n      .replace(/t'/g, \"t\")\n      .replace(/p'/g, \"p\")\n      .replace(/q'/g, \"q\");\n    variants.add(variant2);\n\n    // Character variations\n    variants.add(basicLatin.replace(/c/g, 'ts'));\n    variants.add(basicLatin.replace(/c/g, \"ts'\"));\n    variants.add(basicLatin.replace(/ch/g, 'c'));\n    variants.add(basicLatin.replace(/ch/g, \"ch'\"));\n\n    return Array.from(variants).filter(v => v.length > 0);\n  };\n\n  // Input state\n  const [userCSV, setUserCSV] = useState('');\n  const [csvData, setCsvData] = useState([]);\n  const [parseProgress, setParseProgress] = useState(0);\n  const [batchSize, setBatchSize] = useState(500);\n  const [currentBatch, setCurrentBatch] = useState(1);\n  const [processingBatch, setProcessingBatch] = useState(false);\n\n  // Results state\n  const [matchedResults, setMatchedResults] = useState([]);\n  const [matchStats, setMatchStats] = useState({\n    total: 0,\n    matched: 0,\n    unmatched: 0,\n    byPOS: {}\n  });\n  const [showUnmatched, setShowUnmatched] = useState(false);\n\n  // Refs\n  const resultsRef = useRef(null);\n\n  // Detect if data is TSV or CSV\n  const detectDelimiter = (data) => {\n    const firstLine = data.split('\\n')[0];\n    const tabCount = (firstLine.match(/\\t/g) || []).length;\n    const commaCount = (firstLine.match(/,/g) || []).length;\n\n    return tabCount > commaCount ? '\\t' : ',';\n  };\n\n  // Load reference data\n  const loadReferenceData = () => {\n    if (!referenceCSV.trim()) {\n      setError('Please paste your reference lemma data first.');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError('');\n\n      const delimiter = detectDelimiter(referenceCSV);\n      const fileType = delimiter === '\\t' ? 'TSV' : 'CSV';\n\n      Papa.parse(referenceCSV, {\n        header: true,\n        skipEmptyLines: true,\n        dynamicTyping: true,\n        delimiter: delimiter,\n        complete: (result) => {\n          if (result.data.length > 0) {\n            const firstRow = result.data[0];\n            const headers = Object.keys(firstRow);\n            console.log('Headers detected:', headers);\n\n            // Check for new format with morphemes (Word, Frequency, Lemma, POS, Gloss, Morphemes)\n            const hasNewFormat = headers.some(h => h.toLowerCase() === 'word') &&\n                                headers.some(h => h.toLowerCase() === 'frequency') &&\n                                headers.some(h => h.toLowerCase() === 'lemma') &&\n                                headers.some(h => h.toLowerCase() === 'pos') &&\n                                headers.some(h => h.toLowerCase() === 'gloss') &&\n                                headers.some(h => h.toLowerCase() === 'morphemes');\n\n            // Check for TSV format (Word forms, Lemma, POS, Gloss)\n            const hasTSVFormat = headers.some(h => h.toLowerCase().includes('word forms')) &&\n                                headers.some(h => h.toLowerCase() === 'lemma') &&\n                                headers.some(h => h.toLowerCase() === 'pos') &&\n                                headers.some(h => h.toLowerCase() === 'gloss');\n\n            // Check for original CSV format (Words (Frequency), Lemma)\n            const hasCSVFormat = headers.some(h => h.toLowerCase().includes('words (frequency)')) &&\n                                headers.some(h => h.toLowerCase() === 'lemma');\n\n            if (!hasNewFormat && !hasTSVFormat && !hasCSVFormat) {\n              setError(`${fileType} must have one of these formats:\\n- New format: \"Word\", \"Frequency\", \"Lemma\", \"POS\", \"Gloss\", \"Morphemes\" columns\\n- TSV format: \"Word forms\", \"Lemma\", \"POS\", \"Gloss\" columns\\n- CSV format: \"Words (Frequency)\", \"Lemma\" columns`);\n              setLoading(false);\n              return;\n            }\n\n            setReferenceData(result.data);\n            const wordIndex = {};\n\n            result.data.forEach((row, rowIdx) => {\n              let wordsToIndex = [];\n\n              if (hasNewFormat) {\n                // Handle new format with Word column\n                const wordKey = headers.find(h => h.toLowerCase() === 'word');\n                if (wordKey && row[wordKey]) {\n                  const word = row[wordKey].toString().toLowerCase().trim();\n                  if (word) {\n                    wordsToIndex.push(word);\n                  }\n                }\n              } else if (hasTSVFormat) {\n                // Handle TSV format - find the \"Word forms\" column (case insensitive)\n                const wordFormsKey = headers.find(h => h.toLowerCase().includes('word forms'));\n                if (wordFormsKey && row[wordFormsKey]) {\n                  const wordString = row[wordFormsKey].toString().toLowerCase();\n                  // Split by comma or space, depending on the format\n                  wordsToIndex = wordString.split(/[,\\s]+/).filter(word => word.trim().length > 0);\n                }\n              } else if (hasCSVFormat) {\n                // Handle original CSV format\n                const wordFreqKey = headers.find(h => h.toLowerCase().includes('words (frequency)'));\n                if (wordFreqKey && row[wordFreqKey]) {\n                  const wordString = row[wordFreqKey].toString().toLowerCase();\n                  const wordEntries = wordString.split(',');\n\n                  for (const entry of wordEntries) {\n                    const trimmed = entry.trim();\n                    const match = trimmed.match(/^([^\\(]+)(?:\\s*\\(\\d+\\))?/);\n                    if (match) {\n                      wordsToIndex.push(match[1].trim());\n                    }\n                  }\n                }\n              }\n\n              // Index all words found\n              wordsToIndex.forEach(word => {\n                const cleanWord = word.toLowerCase().trim();\n                if (cleanWord) {\n                  if (!wordIndex[cleanWord]) {\n                    wordIndex[cleanWord] = [];\n                  }\n                  wordIndex[cleanWord].push(rowIdx);\n                }\n              });\n            });\n\n            setIndexedData({ exact: wordIndex });\n            setReferenceLoaded(true);\n            setLoading(false);\n            setError(`✓ ${fileType} data loaded successfully with ${result.data.length} entries`);\n            setTimeout(() => setError(''), 3000);\n          } else {\n            setError('Reference data appears to be empty.');\n            setLoading(false);\n          }\n        },\n        error: (error) => {\n          setError('Error parsing reference data: ' + error.message);\n          setLoading(false);\n        }\n      });\n    } catch (err) {\n      setError('Failed to process reference data: ' + err.message);\n      setLoading(false);\n    }\n  };\n\n  // Parse user CSV\n  const parseUserCSV = () => {\n    if (!userCSV.trim()) return;\n\n    try {\n      Papa.parse(userCSV, {\n        header: true,\n        skipEmptyLines: true,\n        dynamicTyping: true,\n        complete: (result) => {\n          if (result.data.length > 0) {\n            const firstRow = result.data[0];\n            if (!('Word' in firstRow) && !('word' in firstRow)) {\n              setError('CSV must have a \"Word\" column.');\n              return;\n            }\n\n            const normalizedData = result.data.map(row => {\n              const normalizedRow = {};\n              Object.keys(row).forEach(key => {\n                const lowerKey = key.toLowerCase();\n                if (lowerKey === 'word') {\n                  normalizedRow.Word = row[key];\n                } else if (lowerKey === 'freq' || lowerKey === 'frequency') {\n                  normalizedRow.Freq = row[key];\n                } else {\n                  normalizedRow[key] = row[key];\n                }\n              });\n              return normalizedRow;\n            });\n\n            setCsvData(normalizedData);\n            setCurrentBatch(1);\n            setMatchedResults([]);\n            setMatchStats({\n              total: normalizedData.length,\n              matched: 0,\n              unmatched: 0,\n              byPOS: {}\n            });\n            setParseProgress(0);\n          } else {\n            setError('CSV appears to be empty.');\n          }\n        },\n        error: (error) => {\n          setError('Error parsing your CSV: ' + error.message);\n        }\n      });\n    } catch (err) {\n      setError('Failed to process CSV: ' + err.message);\n    }\n  };\n\n  // Find matches\n  const findMatches = (word) => {\n    if (!word || typeof word !== 'string') return [];\n\n    const searchWord = word.toLowerCase().trim();\n    let matches = [];\n\n    // Try exact match first\n    if (indexedData.exact && indexedData.exact[searchWord]) {\n      matches = indexedData.exact[searchWord].map(idx => referenceData[idx]);\n    }\n\n    // Try transcription variants if Georgian characters detected\n    if (matches.length === 0 && /[\\u10A0-\\u10FF]/.test(searchWord)) {\n      const variants = createTranscriptionVariants(searchWord);\n\n      for (const variant of variants) {\n        if (indexedData.exact && indexedData.exact[variant]) {\n          const variantMatches = indexedData.exact[variant].map(idx => {\n            const match = { ...referenceData[idx] };\n            match.transcriptionVariant = variant;\n            return match;\n          });\n          matches.push(...variantMatches);\n        }\n      }\n    }\n\n    // Remove duplicates\n    const uniqueMatches = matches.filter((match, index, self) =>\n      index === self.findIndex(m => m.Lemma === match.Lemma)\n    );\n\n    return uniqueMatches;\n  };\n\n  // Process batch\n  const processBatch = () => {\n    if (csvData.length === 0) return;\n\n    setProcessingBatch(true);\n    const startIdx = (currentBatch - 1) * batchSize;\n    const endIdx = Math.min(startIdx + batchSize, csvData.length);\n    const currentItems = csvData.slice(startIdx, endIdx);\n\n    setTimeout(() => {\n      const batchResults = [];\n      const newMatchStats = {...matchStats};\n\n      currentItems.forEach((item, idx) => {\n        const word = item.Word || '';\n        const frequency = item.Freq || 0;\n        const matches = findMatches(word);\n\n        if (matches.length > 0) {\n          newMatchStats.matched += 1;\n          matches.forEach(match => {\n            const pos = match.POS || 'Unknown';\n            newMatchStats.byPOS[pos] = (newMatchStats.byPOS[pos] || 0) + 1;\n          });\n        } else {\n          newMatchStats.unmatched += 1;\n        }\n\n        batchResults.push({\n          word,\n          frequency,\n          matches,\n          originalIndex: startIdx + idx\n        });\n\n        setParseProgress(Math.round(((startIdx + idx + 1) / csvData.length) * 100));\n      });\n\n      setMatchedResults(prev => [...prev, ...batchResults]);\n      setMatchStats(newMatchStats);\n      setProcessingBatch(false);\n\n      if (resultsRef.current) {\n        resultsRef.current.scrollIntoView({ behavior: 'smooth' });\n      }\n    }, 100);\n  };\n\n  // Process next batch\n  const processNextBatch = () => {\n    if (currentBatch * batchSize < csvData.length) {\n      setCurrentBatch(prev => prev + 1);\n    }\n  };\n\n  // Reset results\n  const resetResults = () => {\n    setCsvData([]);\n    setMatchedResults([]);\n    setParseProgress(0);\n    setCurrentBatch(1);\n    setMatchStats({\n      total: 0,\n      matched: 0,\n      unmatched: 0,\n      byPOS: {}\n    });\n  };\n\n  // Copy to clipboard\n  const copyResultsToClipboard = () => {\n    if (matchedResults.length === 0) return;\n\n    const headers = \"Word\\tFrequency\\tLemma\\tPOS\\tGloss\\tMorphemes\\tTranscription_Variant\\n\";\n    const rows = matchedResults.flatMap(result => {\n      if (result.matches.length === 0) {\n        return showUnmatched ? [`${result.word}\\t${result.frequency}\\t\\t\\t\\t\\t`] : [];\n      }\n      return result.matches.map(match =>\n        `${result.word}\\t${result.frequency}\\t${match.Lemma || ''}\\t${match.POS || ''}\\t${match.Gloss || ''}\\t${match.Morphemes || ''}\\t${match.transcriptionVariant || 'exact'}`\n      );\n    }).join('\\n');\n\n    navigator.clipboard.writeText(headers + rows)\n      .then(() => {\n        setError('Results copied to clipboard successfully!');\n        setTimeout(() => setError(''), 3000);\n      })\n      .catch(() => {\n        setError('Failed to copy results.');\n        setTimeout(() => setError(''), 3000);\n      });\n  };\n\n  // Effects\n  useEffect(() => {\n    if (csvData.length > 0 && !processingBatch) {\n      processBatch();\n    }\n  }, [currentBatch, csvData]);\n\n  // Calculations\n  const hasMoreBatches = csvData.length > 0 && currentBatch * batchSize < csvData.length;\n  const processedCount = Math.min(currentBatch * batchSize, csvData.length);\n  const chartData = Object.entries(matchStats.byPOS)\n    .map(([pos, count]) => ({\n      pos,\n      count,\n      percentage: Math.round((count / matchStats.matched) * 100)\n    }))\n    .sort((a, b) => b.count - a.count);\n\n  return (\n    <div className=\"p-4 max-w-7xl mx-auto\">\n      <h1 className=\"text-2xl font-bold mb-4\">Georgian-Latin Lemma Matcher</h1>\n\n      {error && (\n        <div className={`border px-4 py-3 rounded mb-4 ${\n          error.includes('✓')\n            ? 'bg-green-100 border-green-400 text-green-700'\n            : 'bg-red-100 border-red-400 text-red-700'\n        }`}>\n          {error}\n          <button className=\"float-right font-bold\" onClick={() => setError('')}>×</button>\n        </div>\n      )}\n\n      {loading ? (\n        <div className=\"text-center py-8\">\n          <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mb-2\"></div>\n          <p>Processing data...</p>\n        </div>\n      ) : (\n        <div className=\"space-y-6\">\n          {/* Step 1: Load reference data */}\n          <div className=\"bg-white p-4 rounded shadow\">\n            <h2 className=\"text-xl font-semibold mb-3\">Step 1: Load Reference Lemma Data</h2>\n            <div className=\"mb-3\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Paste your lemmatized reference data (CSV or TSV):\n              </label>\n              <textarea\n                className=\"w-full p-2 border rounded h-32 font-mono text-sm\"\n                value={referenceCSV}\n                onChange={(e) => setReferenceCSV(e.target.value)}\n                placeholder=\"New format: Word[TAB]Frequency[TAB]Lemma[TAB]POS[TAB]Gloss[TAB]Morphemes&#10;OR&#10;CSV format: Words (Frequency),Lemma,Total,POS,Gloss&#10;OR&#10;TSV format: Word forms[TAB]Lemma[TAB]POS[TAB]Gloss\"\n                disabled={referenceLoaded}\n              />\n            </div>\n            <div className=\"mb-3 text-sm text-gray-600\">\n              <p><strong>Supported formats:</strong></p>\n              <ul className=\"list-disc pl-5 mt-1\">\n                <li><strong>New TSV:</strong> Headers \"Word\", \"Frequency\", \"Lemma\", \"POS\", \"Gloss\", \"Morphemes\"</li>\n                <li><strong>CSV:</strong> Headers \"Words (Frequency)\", \"Lemma\", \"POS\", \"Gloss\"</li>\n                <li><strong>TSV:</strong> Headers \"Word forms\", \"Lemma\", \"POS\", \"Gloss\"</li>\n              </ul>\n            </div>\n            <div className=\"flex gap-3 items-center\">\n              {!referenceLoaded ? (\n                <button\n                  className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\"\n                  onClick={loadReferenceData}\n                  disabled={!referenceCSV.trim() || loading}\n                >\n                  Load Reference Data\n                </button>\n              ) : (\n                <div className=\"bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm\">\n                  ✓ Reference data loaded ({referenceData.length} entries)\n                </div>\n              )}\n              {referenceLoaded && (\n                <button\n                  className=\"text-blue-600 hover:text-blue-800 text-sm\"\n                  onClick={() => {\n                    setReferenceLoaded(false);\n                    setReferenceData([]);\n                    setIndexedData({});\n                  }}\n                >\n                  Reset Reference Data\n                </button>\n              )}\n            </div>\n          </div>\n\n          {/* Step 2: Input word list */}\n          <div className={`bg-white p-4 rounded shadow ${!referenceLoaded ? 'opacity-50' : ''}`}>\n            <h2 className=\"text-xl font-semibold mb-3\">Step 2: Input Your Georgian Word List</h2>\n            <div className=\"mb-3\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Paste your CSV data with Georgian words:\n              </label>\n              <textarea\n                className=\"w-full p-2 border rounded h-48 font-mono text-sm\"\n                value={userCSV}\n                onChange={(e) => setUserCSV(e.target.value)}\n                placeholder=\"Freq,Word&#10;1,ორი&#10;1,პუმბა&#10;1,კარაქი\"\n                disabled={!referenceLoaded}\n              />\n            </div>\n            <div className=\"flex flex-wrap gap-3 items-center\">\n              <button\n                className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\"\n                onClick={parseUserCSV}\n                disabled={!referenceLoaded || !userCSV.trim() || processingBatch}\n              >\n                Parse CSV\n              </button>\n              <div className=\"flex items-center\">\n                <label className=\"text-sm font-medium text-gray-700 mr-2\">Batch Size:</label>\n                <select\n                  className=\"border rounded p-1\"\n                  value={batchSize}\n                  onChange={(e) => setBatchSize(Number(e.target.value))}\n                  disabled={!referenceLoaded}\n                >\n                  <option value={100}>100 words</option>\n                  <option value={250}>250 words</option>\n                  <option value={500}>500 words</option>\n                  <option value={1000}>1000 words</option>\n                </select>\n              </div>\n              {csvData.length > 0 && (\n                <span className=\"text-sm text-gray-600\">\n                  {processedCount} of {csvData.length} words processed ({Math.round((processedCount / csvData.length) * 100)}%)\n                </span>\n              )}\n              {csvData.length > 0 && (\n                <button className=\"text-red-600 hover:text-red-800 text-sm\" onClick={resetResults}>\n                  Reset\n                </button>\n              )}\n            </div>\n            {parseProgress > 0 && parseProgress < 100 && (\n              <div className=\"w-full bg-gray-200 rounded-full h-2.5 mt-4\">\n                <div className=\"bg-blue-600 h-2.5 rounded-full\" style={{ width: `${parseProgress}%` }}></div>\n              </div>\n            )}\n          </div>\n\n          {/* Step 3: Results */}\n          {matchedResults.length > 0 && (\n            <div className=\"bg-white p-4 rounded shadow\" ref={resultsRef}>\n              <h2 className=\"text-xl font-semibold mb-3\">Step 3: Matching Results</h2>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                <div className=\"bg-gray-50 p-3 rounded\">\n                  <h3 className=\"font-semibold mb-2\">Summary</h3>\n                  <ul className=\"space-y-1\">\n                    <li>Total Words: <span className=\"font-medium\">{matchStats.total}</span></li>\n                    <li>Words Processed: <span className=\"font-medium\">{processedCount}</span></li>\n                    <li>Matched Words: <span className=\"font-medium text-green-600\">{matchStats.matched}</span> ({Math.round((matchStats.matched / processedCount) * 100)}%)</li>\n                    <li>Unmatched Words: <span className=\"font-medium text-red-600\">{matchStats.unmatched}</span> ({Math.round((matchStats.unmatched / processedCount) * 100)}%)</li>\n                  </ul>\n                </div>\n\n                {chartData.length > 0 && (\n                  <div className=\"bg-gray-50 p-3 rounded h-64\">\n                    <h3 className=\"font-semibold mb-2\">POS Distribution</h3>\n                    <ResponsiveContainer width=\"100%\" height=\"90%\">\n                      <BarChart data={chartData.slice(0, 10)} margin={{ top: 5, right: 20, left: 10, bottom: 5 }}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"pos\" />\n                        <YAxis />\n                        <Tooltip formatter={(value, name, props) => [`${value} (${props.payload.percentage}%)`, 'Count']} />\n                        <Bar dataKey=\"count\" fill=\"#3b82f6\" />\n                      </BarChart>\n                    </ResponsiveContainer>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"flex flex-wrap gap-3 mb-4\">\n                {hasMoreBatches && (\n                  <button\n                    className=\"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded\"\n                    onClick={processNextBatch}\n                    disabled={processingBatch}\n                  >\n                    {processingBatch ? 'Processing...' : `Process Next Batch (${Math.min(batchSize, csvData.length - processedCount)} words)`}\n                  </button>\n                )}\n                <button\n                  className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\"\n                  onClick={copyResultsToClipboard}\n                  disabled={matchedResults.length === 0}\n                >\n                  Copy Results to Clipboard\n                </button>\n                <div className=\"flex items-center ml-auto\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"showUnmatched\"\n                    checked={showUnmatched}\n                    onChange={(e) => setShowUnmatched(e.target.checked)}\n                    className=\"mr-2\"\n                  />\n                  <label htmlFor=\"showUnmatched\" className=\"text-sm\">Show unmatched words</label>\n                </div>\n              </div>\n\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full border-collapse border border-gray-300\">\n                  <thead>\n                    <tr className=\"bg-gray-100\">\n                      <th className=\"border border-gray-300 px-4 py-2 text-left\">Word</th>\n                      <th className=\"border border-gray-300 px-4 py-2 text-left\">Frequency</th>\n                      <th className=\"border border-gray-300 px-4 py-2 text-left\">Lemma</th>\n                      <th className=\"border border-gray-300 px-4 py-2 text-left\">POS</th>\n                      <th className=\"border border-gray-300 px-4 py-2 text-left\">Gloss</th>\n                      <th className=\"border border-gray-300 px-4 py-2 text-left\">Morphemes</th>\n                      <th className=\"border border-gray-300 px-4 py-2 text-left\">Match Type</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {matchedResults.map((result) => {\n                      if (result.matches.length === 0) {\n                        if (!showUnmatched) return null;\n                        return (\n                          <tr key={`unmatched-${result.originalIndex}`} className=\"bg-red-50\">\n                            <td className=\"border border-gray-300 px-4 py-2\">{result.word}</td>\n                            <td className=\"border border-gray-300 px-4 py-2\">{result.frequency}</td>\n                            <td className=\"border border-gray-300 px-4 py-2 text-red-500\">Not found</td>\n                            <td className=\"border border-gray-300 px-4 py-2\">-</td>\n                            <td className=\"border border-gray-300 px-4 py-2\">-</td>\n                            <td className=\"border border-gray-300 px-4 py-2\">-</td>\n                            <td className=\"border border-gray-300 px-4 py-2\">-</td>\n                          </tr>\n                        );\n                      }\n\n                      return result.matches.map((match, matchIdx) => (\n                        <tr key={`match-${result.originalIndex}-${matchIdx}`} className={matchIdx > 0 ? \"bg-blue-50\" : \"\"}>\n                          <td className=\"border border-gray-300 px-4 py-2\">{matchIdx === 0 ? result.word : \"\"}</td>\n                          <td className=\"border border-gray-300 px-4 py-2\">{matchIdx === 0 ? result.frequency : \"\"}</td>\n                          <td className=\"border border-gray-300 px-4 py-2\">{match.Lemma}</td>\n                          <td className=\"border border-gray-300 px-4 py-2\">{match.POS}</td>\n                          <td className=\"border border-gray-300 px-4 py-2\">{match.Gloss}</td>\n                          <td className=\"border border-gray-300 px-4 py-2 font-mono text-sm\">{match.Morphemes}</td>\n                          <td className=\"border border-gray-300 px-4 py-2\">\n                            <span className={match.transcriptionVariant ? \"text-blue-600\" : \"text-green-600\"}>\n                              {match.transcriptionVariant ? `Transcribed: ${match.transcriptionVariant}` : 'Exact'}\n                            </span>\n                          </td>\n                        </tr>\n                      ));\n                    })}\n                  </tbody>\n                </table>\n              </div>\n\n              {hasMoreBatches && (\n                <div className=\"mt-4 text-center\">\n                  <button\n                    className=\"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded\"\n                    onClick={processNextBatch}\n                    disabled={processingBatch}\n                  >\n                    {processingBatch ? 'Processing...' : `Process Next Batch (${Math.min(batchSize, csvData.length - processedCount)} words)`}\n                  </button>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Instructions */}\n          <div className=\"bg-blue-50 p-4 rounded\">\n            <h3 className=\"font-semibold mb-2\">Instructions</h3>\n            <ol className=\"list-decimal pl-5 space-y-1\">\n              <li><strong>Step 1:</strong> Paste your lemmatized reference data (CSV or TSV format) and click \"Load Reference Data\"</li>\n              <li><strong>Step 2:</strong> Paste your Georgian word list CSV and click \"Parse CSV\"</li>\n              <li><strong>Step 3:</strong> Process words in batches and review matches</li>\n              <li>Use \"Copy Results\" to export all matches to clipboard</li>\n            </ol>\n            <p className=\"mt-2 text-sm text-gray-600\">\n              This tool supports both exact matching and Georgian-to-Latin transcription matching with multiple variant patterns.\n              It now handles CSV, TSV, and the new morpheme-enhanced TSV format with columns: Word, Frequency, Lemma, POS, Gloss, Morphemes.\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}